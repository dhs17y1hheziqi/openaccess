<project name="test" default="compile" basedir=".">

    <import file="../common.xml"/>

    <!-- Database connection properties -->
    <property file="etc/${db}.properties"/>

    <property name="db.driver" value=""/>
    <property name="db.db" value=""/>
    <property name="db.user" value=""/>
    <property name="db.password" value=""/>
    <property name="db.properties" value=""/>
    <property name="db.lib" value="*.jar"/>

    <property name="versant.host" value=""/>
    <property name="halt.on.error" value="true"/>
    <property name="hyperdrive" value="false"/>
    <property name="only.failed.files" value="true"/>
    <property name="progress.gui" value="true"/>
    <property name="qa.server" value=""/>
    <property name="qa.assessment" value="Adhoc"/>
    <property name="qa.ammount" value="ALL"/>
	<property name="qa.product" value=""/>

    <path id="cp.path">
        <path location="build/classes"/>
        <path location="src"/>
        <fileset dir="../jdbc/lib.jdbc" includes="${db.lib}"/>
        <fileset dir="lib.jdbc" includes="${db.lib}"/>
        <path location="../engine/build/classes"/>
        <path location="../jdbc/build/classes"/>
        <path location="../ejbapi/build/classes"/>
        <path location="../ejb/build/classes"/>
        <path location="../vds/build/classes"/>
        <path location="../remote/build/classes"/>
<!--        <path location="../cluster/build/classes"/>-->
        <path location="../tools/build/classes"/>
        <fileset dir="../engine/lib" includes="**/*.jar"/>
        <fileset dir="../jdbc/lib.jdbc" includes="**/*.jar"/>
        <fileset dir="../vds/lib" includes="**/*.jar"/>
<!--        <fileset dir="../cluster/lib" includes="**/*.jar"/>-->
        <fileset dir="../jsr220/lib" includes="**/*.jar"/>
        <fileset dir="lib" includes="*.jar"/>
    </path>

    <target name="init">
        <mkdir dir="build/classes"/>
    </target>

    <target name="clean">
        <delete dir="build"/>
    </target>

    <target name="check_dirs">
        <available file="../remote" property="remote_available"/>
    </target>

    <target name="compile-deps" depends="init" unless="nodeps">
        <ant target="compile" dir="../engine" />
        <ant target="compile" dir="../jdbc" />
        <ant target="compile" dir="../vds" />
        <ant target="compile_remote"/>
        <ant target="compile" dir="../ejbapi" />
        <ant target="compile" dir="../ejb" />
        <ant target="compile" dir="../tools" />
    </target>

    <target name="compile_remote" depends="check_dirs"  if="remote_available">
        <ant target="compile" dir="../remote"/>
    </target>

    <target name="compile" depends="compile-deps"
            description="Compile all sources">
        <javac destdir="build/classes"
               source="1.5"
               target="1.5"
               compiler="modern"
               debug="on"
               optimize="${javac.optimize}"
               debuglevel="${javac.debuglevel}">
            <src path="src"/>
            <include name="com/versant/core/ejb/junit/**"/>
            <classpath>
                <path refid="cp.path"/>
            </classpath>
        </javac>
        <javac destdir="build/classes"
               source="1.3"
               target="1.3"
               compiler="modern"
               debug="on"
               optimize="${javac.optimize}"
               debuglevel="${javac.debuglevel}">
            <src path="src"/>
            <include name="com/versant/core/jdo/junit/**"/>
            <classpath>
                <path refid="cp.path"/>
            </classpath>
        </javac>
        <taskdef resource="versant.tasks">
            <classpath refid="cp.path"/>
        </taskdef>
    </target>

    <!-- Parse test property into separate config and set properties. -->
    <target name="junit-init">
        <fail unless="test" message="Must set test property e.g. -Dtest=test2"/>
        <script language="beanshell"> <![CDATA[
            test = project.getProperty("test");
            int i = test.indexOf("/");
            String = jdoDir = "jdo";
            String config, set;
            if (i < 0) {
                set = test;
                config = "default";
            } else {
                set = test.substring(0, i);
                config = test.substring(i + 1);
            }
            if (set.startsWith("ejb")) {
               jdoDir = "ejb";
            }

            project.setProperty("set", set);
            project.setProperty("jdoDir", jdoDir);
            project.setProperty("config", config);
            ]]>
        </script>
    </target>

    <!-- Create build/classes/test.jdogenie from a tokenized project file
         src/com/versant/core/jdo/junit/${set}/test.jdogenie. Also creates
         test.properties for resolving the tokens in the Workbench. -->
    <target name="junit-configure" depends="junit-init">
        <condition property="vds">
            <or>
                <contains substring="vds:" string="${db.url}"/>
                <contains substring="versant:" string="${db.url}"/>
            </or>
        </condition>
        <filter token="URL" value="${db.url}"/>
        <filter token="DRIVER" value="${db.driver}"/>
        <filter token="USER" value="${db.user}"/>
        <filter token="PASSWORD" value="${db.password}"/>
        <filter token="PROPERTIES" value="${db.properties}"/>
        <filter token="DB" value=""/>
        <filter token="HYPERDRIVE" value="${hyperdrive}"/>
        <ant antfile="src/com/versant/core/${jdoDir}/junit/${set}/test.xml"
            target="${config}"/>
        <copy file="build/test.jdogenie"
            tofile="build/classes/test.jdogenie" filtering="true"
            overwrite="true"
            failonerror="false"/>
        <copy file="build/persistence.xml"
              tofile="build/classes/persistence.xml" filtering="true"
              overwrite="true"
              failonerror="false"/>
        <delete file="build/test.jdogenie" failonerror="false"/>
        <delete file="build/persistence.xml" failonerror="false"/>
        <echo file="test.properties">
            DRIVER=${db.driver}
            URL=${db.url}
            DB=${db.db}
            USER=${db.user}
            PASSWORD=${db.password}
            PROPERTIES=${db.properties}
        </echo>
        <mkdir dir="build/test/${set}-${config}"/>
    </target>

    <target name="junit-enhance"
        depends="compile, junit-configure"
        description="Enhance for tests">
        <jdo-enhance config="test.jdogenie"
            outputDir="build/classes" ><!--genhyper="true" hyperSrcDir="/home/carl/work/clean/openaccess/test/src"-->
            <classpath>
                <path refid="cp.path"/>
            </classpath>
            <persistentaware dir="build/classes/com/versant/core/${jdoDir}/junit/${set}" />
        </jdo-enhance>
    </target>

    <target name="junit-create-db"
        depends="compile, junit-configure"
        description="Create database for tests"
        unless="vds">
        <jdo-create-db
            config="test.jdogenie"
            destdir="build/test/${set}-${config}"
            droptables="*"
            direct="*" >
            <classpath>
                <path refid="cp.path"/>
            </classpath>
        </jdo-create-db>
    </target>

    <target name="junit-drop-db"
        depends="compile, junit-configure"
        description="Drop all tables in database for tests"
        unless="vds">
        <jdo-create-db
            config="test.jdogenie"
            destdir="build/test/${set}-${config}"
            droptables="*">
            <classpath>
                <path refid="cp.path"/>
            </classpath>
        </jdo-create-db>
    </target>

    <target name="junit-run"
            depends="compile, junit-configure"
            description="Run tests against current db and enhanced classes">
        <junit fork="true" printsummary="true" maxmemory="256m"
            haltonerror="${halt.on.error}"
            haltonfailure="${halt.on.error}">
            <classpath>
                <path refid="cp.path"/>
            </classpath>
            <jvmarg value="-Dhyperdrive=${hyperdrive}"/>
            <jvmarg value="-Dtest.out.dir=build/test/${set}-${config}"/>
            <jvmarg value="-Ddump.on.error=${halt.on.error}"/>
            <jvmarg value="-Donly.failed.files=${only.failed.files}"/>
            <jvmarg value="-Dprogress.gui=${progress.gui}"/>
            <jvmarg value="-Dversant.tests=true"/>
            <jvmarg value="-Dtests.cfg=${test}"/>
            <jvmarg value="-Ddb=${db.description}"/>
            <jvmarg value="-Dqa.server=${qa.server}"/>
            <jvmarg value="-Dqa.assessment=${qa.assessment}"/>
            <jvmarg value="-Dqa.ammount=${qa.ammount}"/>
        	<jvmarg value="-Dqa.product=${qa.product}"/>
            <jvmarg value="-Dversant.host=${versant.host}"/>
            <jvmarg value="-Djava.security.policy=etc/policy"/>
            <formatter classname="com.versant.core.jdo.junit.VersantResultFormatter"
                extension=".out"/>
            <batchtest todir="build/test/${set}-${config}">
                <fileset dir="src">
                    <include name="com/versant/core/${jdoDir}/junit/${set}/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="junit-server" depends="junit-enhance, junit-create-db"
        description="Start server for running remote testing">
        <java classname="com.versant.core.jdo.junit.StartTestServer"
                fork="yes" maxmemory="256m" >
            <jvmarg value="-Djava.security.policy=etc/policy"/>
            <jvmarg value="-Dhyperdrive=${hyperdrive}"/>
            <classpath>
                <path refid="cp.path"/>
            </classpath>
        </java>
    </target>

    <target name="junit-web" depends="junit-enhance, junit-create-db"
            description="Create exploded war in build/web for remote http tests">
        <mkdir dir="build/web/WEB-INF"/>
        <copy todir="build/web/WEB-INF">
            <fileset file="etc/web/web.xml"/>
        </copy>
        <mkdir dir="build/web/WEB-INF/classes"/>
        <copy todir="build/web/WEB-INF/classes">
            <fileset dir="src" includes="**/*.jdo"/>
            <fileset dir="../engine/build/classes"/>
            <fileset dir="../jdbc/build/classes"/>
            <fileset dir="../vds/build/classes"/>
            <fileset dir="../remote/build/classes"/>
<!--            <fileset dir="../cluster/build/classes"/>-->
            <fileset dir="../tools/build/classes"/>
            <fileset dir="build/classes"/>
        </copy>
        <mkdir dir="build/web/WEB-INF/lib"/>
        <copy todir="build/web/WEB-INF/lib">
            <fileset dir="../jdbc/lib.jdbc" includes="${db.lib}"/>
            <fileset dir="lib.jdbc" includes="${db.lib}"/>
            <fileset dir="../engine/lib" includes="**/*.jar"/>
            <fileset dir="../vds/lib" includes="**/*.jar"/>
<!--            <fileset dir="../cluster/lib" includes="**/*.jar"/>-->
            <fileset dir="lib" includes="*.jar"/>
        </copy>
    </target>

    <target name="junit-clean" depends="junit-init">
        <delete dir="build/test/${set}-${config}"/>
        <delete file="build/classes/test.jdogenie" failonerror="false"/>
        <delete file="build/classes/persistence.xml" failonerror="false"/>
    </target>

    <target name="junit-run-clean"
            depends="junit-clean, junit-enhance, junit-create-db, junit-run"
            description="Enhance, create db and run tests">
    </target>

</project>
