<!--
Welcome to the JDO Genie Testcenter demo. This is a simple application
demonstrating how to use JDO with Struts in a web application. In addition
there is also a Swing GUI client that uses JDO Genie's support for remote
PersistenceManager's. It can connect to the JDO Genie server running in the
web tier or to a standalone JDO Genie server.

This application manages exam sittings. You can log on as the
administrator (username admin, password admin) and create exams. Or you
can register as a student and manage the exams you are registered for.

$Id: build.xml,v 1.3 2005/04/18 10:19:07 carl Exp $
-->
<project name="testcenter" basedir="./" default="compile">

    <!-- Edit these settings to match your environment. -->
    <property environment="env"/>
    <property name="openaccess.home" value="../.."/>
    <property name="webapp.deploy" value="${env.CATALINA_HOME}/webapps"/>

    <property name="classes" value="webapp/WEB-INF/classes"/>

    <path id="cp">
        <pathelement path="${classes}"/>
        <fileset dir="lib" includes="**/*.jar"/>
        <fileset dir="webapp/WEB-INF/lib" includes="**/*.jar"/>
        <fileset dir="${openaccess.home}" includes="lib/*.jar" excludes="xercesImpl.jar,xml-apis.jar"/>
    </path>

    <target name="init">
        <tstamp/>
        <available file="${openaccess.home}" property="openaccess.home.present"/>
        <fail unless="openaccess.home.present"
            message="${openaccess.home} not found: Edit build.xml"/>
        <mkdir dir="build"/>
        <mkdir dir="${classes}"/>
        <!-- Only define the JDO Genie tasks after ${classes} has been created. -->
        <taskdef resource="versant.tasks">
            <classpath>
                <path refid="cp"/>
                <fileset dir="${openaccess.home}" includes="tools/*.jar"/>
            </classpath>
        </taskdef>
    </target>

    <target name="clean" description="Delete all generated files">
        <delete dir="${classes}"/>
        <delete dir="build"/>
        <delete file="main.sql"/>
        <delete file="testcenter.war"/>
        <delete file="testcenter-gui.jar"/>
    </target>

    <!-- Copy any resource or configuration files that need to be on the
         classpath to webapp/WEB-INF/classes. -->
    <target name="resources" depends="init">
        <copy todir="${classes}" includeEmptyDirs="no">
            <!-- The project file must be on the classpath -->
            <fileset dir="./" includes="versant.properties"/>
            <fileset dir="src">
                <patternset>
                    <include name="**/*.conf"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.xml"/>
                    <include name="**/*.jdo"/>
                </patternset>
            </fileset>
            <fileset dir="${openaccess.home}/license">
                <patternset>
                    <include name="openaccess.license"/>
                </patternset>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="resources"
        description="Compile and enhance Java sources">
        <!-- Copy JDO libraries to webapp/WEB-INF/lib. -->
        <copy todir="webapp/WEB-INF/lib">
            <fileset dir="${openaccess.home}/lib" includes="*.jar" excludes="xercesImpl.jar,xml-apis.jar"/>
        </copy>
        <!-- Delete the classes if the JDO meta data has been changed.
             They need to be recompiled and enhanced. -->
        <dependset>
            <srcfileset dir="src" includes="**/*.jdo"/>
            <targetfileset dir="${classes}" includes="**/*.class"/>
        </dependset>
        <javac srcdir="src" destdir="${classes}" classpathref="cp" debug="true"/>
        <jdo-enhance project="versant.properties" outputDir="${classes}">
            <persistentaware dir="${classes}"/>
        </jdo-enhance>
    </target>

    <target name="create-db" depends="compile"
        description="Recreate database schema">
        <jdo-create-db project="versant.properties"
            destdir="./" droptables="*" direct="*"/>
    </target>

    <target name="war" depends="compile"
        description="Create testcenter.war for Web deployment">
        <war basedir="webapp"
            warfile="testcenter.war"
            webxml="webapp/WEB-INF/web.xml"
            excludes="WEB-INF/web.xml,WEB-INF/classes/com/versant/testcenter/gui/**"
            />
    </target>

    <target name="gui-jar" depends="compile"
        description="Create runnable testcenter-gui.jar for the GUI client">
        <mkdir dir="build/gui"/>
        <jar destfile="testcenter-gui.jar">
            <manifest>
                <attribute name="Main-Class" value="com.versant.testcenter.gui.Main"/>
            </manifest>
            <fileset dir="${classes}">
                <include name="**/openaccess.license"/>
                <include name="**/versant.properties"/>
                <include name="com/versant/testcenter/gui/**"/>
                <include name="com/versant/testcenter/model/**"/>
                <include name="com/versant/testcenter/service/**"/>
            </fileset>
            <zipfileset src="webapp/WEB-INF/lib/openaccess.jar" />
            <zipfileset src="webapp/WEB-INF/lib/jta.jar" />
        </jar>
        <echo message="Usage: java -jar testcenter-gui.jar [&lt;remote url e.g. http://127.0.0.1:8080/testcenter/pmf&gt;]"/>
    </target>

    <target name="deploy" depends="war,gui-jar"
        description="Deploy testcenter.war and create testcenter-gui.jar">
        <delete dir="${webapp.deploy}/testcenter"/>
        <copy file="testcenter.war" todir="${webapp.deploy}"/>
    </target>

    <target name="server" depends="gui-jar"
        description="Start standalone server for 3-tier usage without web app">
        <java classname="com.versant.testcenter.service.Context"
            classpathref="cp" fork="true">
            <jvmarg value="-Djava.security.policy=./policy.all"/>
        </java>
    </target>

    <target name="grinder-testdata" depends="create-db"
        description="Insert test data for Grinder testing">
        <java classname="com.versant.testcenter.grinder.TestData"
            classpathref="cp" fork="true">
            <jvmarg value="-Djava.security.policy=./policy.all"/>
        </java>
    </target>

    <target name="grinder-console" description="Run Grinder console">
        <java classname="net.grinder.Console" classpathref="cp" fork="true">
            <jvmarg value="-Djava.security.policy=./policy.all"/>
        </java>
    </target>

    <target name="grinder-client" description="Run Grinder client">
        <java classname="net.grinder.Grinder" classpathref="cp" fork="true">
            <jvmarg value="-Djava.security.policy=./policy.all"/>
            <arg line="./grinder/grinder.properties"/>
        </java>
    </target>

</project>
