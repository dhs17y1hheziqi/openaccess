
/*
 * Copyright (c) 1998 - 2005 Versant Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Versant Corporation - initial API and implementation
 */
/* The following code was generated by JFlex 1.3.5 on 6/21/04 4:28 PM */

package com.versant.core.jdo.tools.workbench.sql.formatter;

import com.versant.core.jdo.tools.workbench.jdoql.lexer.Lexer;
import com.versant.core.jdo.tools.workbench.jdoql.lexer.Token;

import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * @keep-all
 * SQLFormatter is a sql lexer.  Created with JFlex.
 * The tokens returned should comply with the sql Language Specification
 * @see SQLFormatterToken


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/21/04 4:28 PM from the specification file
 * <tt>file:/home/carl/work/hemtech/jdo2/lib/../src/za/co/hemtech/jdo/tools/workbench/sql/formatter/SQLFormatterLexer.flex</tt>
 */
public class SQLFormatter implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 41,  0, 30, 41,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    30, 38, 32, 38, 33, 38, 38, 40, 35, 36, 39, 45, 34, 25, 44, 46, 
    43, 43, 29, 31, 31, 31, 31, 31, 31, 31, 37, 37, 38, 38, 38,  0, 
    38,  8, 19, 16, 10,  7,  1, 11,  6, 18, 28, 23, 15,  4,  9,  3, 
    13, 27,  2, 14, 17, 12, 22,  5, 26, 20, 21, 37, 42, 37, 38, 24, 
    38,  8, 19, 16, 10,  7,  1, 11,  6, 18, 28, 23, 15,  4,  9,  3, 
    13, 27,  2, 14, 17, 12, 22,  5, 26, 20, 21,  0, 38,  0, 38,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    47,    94,   141,   188,   235,   282,   329,   376,   423, 
      470,   517,   564,   611,   658,   705,   752,   799,   846,   893, 
      940,   987,  1034,  1081,  1128,  1175,  1222,  1269,  1316,  1363, 
     1410,  1457,  1222,  1222,  1222,  1222,  1222,  1504,  1551,  1598, 
     1645,  1692,  1739,  1786,  1833,  1880,  1927,  1974,  2021,  2068, 
     2115,  2162,  2209,  2256,  2303,  2350,  2397,  2444,  2491,  2538, 
     2585,  2632,  2679,  2726,  2773,  2820,  2867,  2914,  2961,  3008, 
     3055,  3102,  3149,  3196,  3243,  3290,  3337,  3384,  3431,  3478, 
     3525,  3572,  3619,  3666,  3713,  3760,  3807,  3854,  3901,  3948, 
     3995,  4042,  4089,  4136,  4183,  4230,  4277,  4324,  4371,  4418, 
     4465,  4512,  4559,  4606,  4653,  4700,  4747,  4794,  4841,  4888, 
     4935,  4982,  5029,  5076,  5123,  5170,  5217,  5264,  5311,  5358, 
     5405,  5452,  5499,  5546,  5593,  5640,  5687,  5734,  5781,  5828, 
     5875,  5922,  5969,  6016,  6063,  6110,  6157,  6204,  6251,  6298, 
     6345,  6392,  6439,  6486,  6533,  6580,  6627,  6674,  6721,  6768, 
     6815,  6862,  6909,  6956,  7003,  7050,  7097,  7144,  7191,  7238, 
     7285,  7332,  7379,    94,  7426,  7473,  7520,  7567,  7614,  7661, 
     7708,  7755,  7802,  7849,  7896,  1457,  1504,  1222,  1222,  7943, 
     1222,  7990,  8037,  1692,  1222,  1222,  8084,  8131,  8178,  8225, 
     8272,  8319,  8366,  8413,  8460,  8507,  8554,  8601,  8648,  8695, 
     8742,  8789,  8836,  8883,  8930,  8977,  9024,  9071,  9118,  9165, 
     9212,  9259,  9306,  9353,  9400,  9447,  9494,  9541,  9588,  9635, 
     9682,  9729,  9776,  9823,  9870,  9917,  9964, 10011, 10058, 10105, 
    10152, 10199, 10246, 10293, 10340, 10387, 10434, 10481, 10528, 10575, 
    10622, 10669, 10716, 10763, 10810, 10857, 10904, 10951, 10998, 11045, 
    11092,    94, 11139, 11186, 11233, 11280, 11327, 11374, 11421, 11468, 
    11515, 11562, 11609, 11656, 11703, 11750, 11797, 11844, 11891, 11938, 
    11985, 12032, 12079, 12126, 12173, 12220, 12267, 12314, 12361, 12408, 
    12455, 12502, 12549, 12596, 12643, 12690, 12737, 12784, 12831, 12878, 
    12925, 12972, 13019, 13066, 13113, 13160, 13207, 13254, 13301, 13348, 
    13395, 13442, 13489, 13536, 13583, 13630, 13677, 13724, 13771, 13818, 
    13865, 13912, 13959, 14006, 14053, 14100, 14147, 14194, 14241, 14288, 
    14335, 14382, 14429, 14476, 14523, 14570, 14617, 14664, 14711, 14758, 
    14805, 14852, 14899, 14946, 14993, 15040, 15087, 15134, 15181, 15228, 
    15275, 15322, 15369, 15416, 15463, 15510, 15557, 15604, 15651, 15698, 
    15745, 15792, 15839, 15886, 15933, 15980, 16027, 16074, 16121, 16168, 
    16215, 16262, 16309, 16356, 16403, 16450, 16497, 16544, 16591, 16638, 
    16685, 16732, 16779, 16826, 16873, 16920, 16967, 17014, 17061, 17108, 
    17155, 17202, 17249, 17296, 17343, 17390, 17437, 17484, 17531, 17578, 
    17625, 17672, 17719, 17766, 17813, 17860, 17907, 17954,  1222, 18001, 
    18048, 18095, 18142, 18189, 18236, 18283, 18330,  1504, 18377, 18424, 
    18471, 18518,    94, 18565, 18612, 18659, 18706, 18753,  9635, 18800, 
    18847, 18894, 18941, 18988, 19035, 19082, 19129, 19176, 19223, 19270, 
    19317, 19364, 19411, 19458, 19505, 19552, 19599, 19646, 19693, 19740, 
    19787, 19834, 19881, 19928, 19975, 20022, 20069, 20116, 20163, 20210, 
    20257, 20304, 20351, 20398, 20445, 20492, 20539, 20586, 20633, 20680, 
    20727, 20774, 20821, 20868, 20915, 20962, 21009, 21056, 21103, 21150, 
    21197, 21244, 21291, 21338, 21385, 21432, 21479, 21526, 21573, 21620, 
    21667, 21714, 21761, 21808, 21855, 21902, 21949, 21996, 22043, 22090, 
    22137, 22184, 22231, 22278, 22325, 22372, 22419, 22466, 22513, 22560, 
    22607, 22654, 22701, 22748, 22795, 22842, 22889, 22936, 22983, 23030, 
    23077, 23124, 23171, 23218, 23265, 23312, 23359, 23406, 23453, 23500, 
    23547, 23594, 23641, 23688, 23735, 23782, 23829, 23876, 23923, 23970, 
    24017, 24064, 24111, 24158, 24205, 24252, 24299, 24346, 24393, 24440, 
    24487, 24534, 24581, 24628, 24675, 24722, 24769, 24816, 24863, 24910, 
    24957, 25004, 25051, 25098, 25145, 25192, 25239, 25286, 25333, 25380, 
    25427, 25474, 25521, 25568, 25615, 25662, 25709, 25756, 25803, 25850, 
    25897, 25944, 25991, 26038, 26085, 26132, 26179, 26226, 26273, 26320, 
    26367, 26414, 26461, 26508, 26555, 26602, 17954, 17907,  1222, 26649, 
    26696, 26743, 26790, 26837, 26884, 18330, 26931, 26978, 27025, 27072, 
    27119, 27166, 27213, 27260, 27307, 27354, 27401, 27448, 27495, 27542, 
    27589, 27636, 27683, 27730, 27777, 27824, 27871, 27918, 27965, 28012, 
    28059, 28106, 28153, 28200, 28247, 28294, 28341, 28388, 28435, 28482, 
    20116, 28529, 28576, 28623, 11374, 28670, 28717, 28764, 28811, 28858, 
    28905, 28952, 28999, 29046, 29093, 29140, 29187, 10434, 29234, 29281, 
    25098, 29328, 29375, 29422, 29469, 29516, 29563, 29610, 29657, 29704, 
    29751, 29798, 29845, 29892, 29939, 29986, 30033, 30080, 30127, 30174, 
    30221, 30268, 30315, 30362, 30409, 30456, 30503, 30550, 30597, 30644, 
    30691, 30738, 30785, 30832, 30879, 30926, 30973, 31020, 31067, 31114, 
    31161, 31208, 31255, 31302, 31349, 31396, 31443, 31490, 31537, 31584, 
    31631, 31678, 31725, 31772, 31819, 31866, 31913, 31960, 32007, 32054, 
    32101, 32148, 32195, 32242, 32289, 32336, 32383, 32430, 30362, 32477, 
    32524, 32571, 32618, 32665, 32712, 32759, 32806, 32853, 32900, 32947, 
    32994, 33041, 33088, 33135, 33182, 33229, 33276, 33323, 11515, 33370, 
    33417, 33464, 33511, 33558, 33605,    94, 33652, 33699, 33746, 33793, 
    33840, 33887, 33934, 33981, 34028, 34075, 34122, 34169, 34216, 34263, 
    32054, 34310, 34357, 34404, 34451, 34498, 34545, 34592, 34639, 34686, 
    34733, 34780, 34827, 34874, 34921, 34968, 35015, 25427, 35062, 35109, 
    35156, 35203, 35250, 35297, 35344, 35391, 35438, 35485, 35532, 35579, 
    35626, 35673, 35720, 35767, 35814, 35861, 35908, 35955, 36002, 36049, 
    36096, 36143, 36190, 36237, 36284, 36331, 36378, 36425, 36472, 36519, 
    36566, 36613, 36660, 36707, 36754, 36801, 36848, 36895, 36942, 36989, 
    37036, 37083, 37130, 37177, 37224, 37271, 37318, 37365, 37412, 37459, 
    36754, 37506, 37553, 37600, 37647, 37694,  2585, 37741, 37788, 37835, 
    37882, 37929, 37976, 38023, 38070, 38117, 38164, 38211, 38258, 38305, 
    38352, 38399, 38446,  1222, 34921, 38493, 38540, 38587, 38634, 38681, 
    38728, 38775, 31819, 38822, 38869, 38916, 38963, 39010, 39057, 39104, 
    39151, 39198, 39245, 39292, 39339, 39386, 39433, 39480, 39527, 18377, 
    39574, 39621, 39668, 39715, 39762, 39809, 39856, 39903, 39950, 39997, 
    40044, 40091, 40138, 40185, 40232, 40279, 40326, 40373, 40420, 40467, 
    40514, 40561, 40608, 40655, 40702, 40749, 40796, 40843, 40890, 40937, 
    40984, 41031, 41078, 41125, 41172, 41219, 41266, 41313, 41360, 41407, 
    41454, 41501, 41548, 41595, 41642, 41689, 41736, 41783, 41830, 41877, 
    41924, 41971, 42018, 42065, 42112, 42159, 42206, 42253, 42300, 42347, 
    42394, 42441, 42488, 42535, 42582, 36237, 42629, 42676, 42723, 42770, 
    42817, 42864, 42911, 42958, 43005, 43052, 43099, 43146, 43193, 43240, 
    43287, 43334, 43381, 43428, 43475, 43522, 43569, 43616, 43663, 43710, 
    43757, 43804, 43851, 43898, 43945, 43992, 44039, 44086, 44133, 44180, 
    44227, 44274
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\3\1\35\1\36\1\37\1\36\1\33"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\44\1\46"+
    "\1\37\1\3\1\36\1\47\1\45\1\50\47\51\1\52"+
    "\6\51\1\53\31\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\54\1\55\3\3"+
    "\1\56\1\57\3\3\1\60\2\3\1\61\2\3\1\62"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\63\3\3\1\64\4\3\1\65"+
    "\5\3\1\66\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\1\3\1\67\1\70\2\3"+
    "\1\71\3\3\1\72\2\3\1\73\1\74\1\3\1\75"+
    "\1\76\1\3\1\77\1\100\2\3\1\101\2\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\3\3\1\102\3\3\1\103\1\104\3\3\1\105\5\3"+
    "\1\106\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\107\1\110\2\3\1\111"+
    "\13\3\1\112\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\113\4\3\1\114"+
    "\11\3\1\115\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\116\1\117\4\3"+
    "\1\120\1\121\6\3\1\122\2\3\1\0\1\123\1\124"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\1\3\1\125\1\126\6\3\1\127\1\130\1\131\1\132"+
    "\1\3\1\133\1\134\1\135\1\136\1\3\1\137\2\3"+
    "\1\140\2\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\141\3\3\1\142\1\143"+
    "\3\3\1\144\3\3\1\145\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\146"+
    "\1\147\3\3\1\150\1\151\11\3\1\152\1\3\1\153"+
    "\4\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\154\1\155\3\3\1\156\7\3"+
    "\1\157\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\160\3\3\1\161\1\162"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\163\1\164\3\3\1\165\1\166"+
    "\3\3\1\167\2\3\1\170\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\3\3\1\171"+
    "\1\172\1\3\1\173\1\174\1\175\3\3\1\176\1\177"+
    "\2\3\1\200\1\201\1\202\1\3\1\203\4\3\1\0"+
    "\1\3\1\204\2\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\205\3\3\1\206\1\207\11\3"+
    "\1\210\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\211\1\212\2\3\1\213"+
    "\1\3\1\214\3\3\1\215\2\3\1\216\4\3\1\217"+
    "\4\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\220\1\221\2\3\1\222\1\223"+
    "\1\224\11\3\1\225\1\3\1\226\4\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\227\4\3\1\230\1\231\1\232\2\3\1\233\1\234"+
    "\1\3\1\235\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\236\1\237\3\3"+
    "\1\240\1\241\6\3\1\242\2\3\1\243\1\3\1\244"+
    "\4\3\1\0\4\3\1\0\1\3\1\0\1\3\6\0"+
    "\1\245\1\0\2\3\3\0\7\3\1\246\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\3\3\1\247\25\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\250\1\251\11\3"+
    "\1\252\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\253\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\113\0\1\254"+
    "\25\0\3\3\1\255\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\12\0\1\256\25\0\1\36"+
    "\1\0\1\36\13\0\1\36\1\257\40\0\1\37\12\0"+
    "\1\37\5\0\31\3\1\0\3\3\1\260\1\0\1\260"+
    "\1\0\1\3\10\0\1\3\1\260\3\0\50\261\1\262"+
    "\1\263\1\264\4\261\35\0\1\257\1\0\1\257\13\0"+
    "\1\257\52\0\1\265\7\0\47\51\1\266\6\51\1\267"+
    "\47\51\1\270\6\51\1\271\47\51\1\272\6\51\1\267"+
    "\3\3\1\273\3\3\1\274\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\275"+
    "\11\3\1\276\14\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\116\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\121\2\3\1\277\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\300"+
    "\5\3\1\301\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\302\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\303\6\3\1\304\17\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\5\3\1\305"+
    "\6\3\1\306\2\3\1\307\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\1\3\1\310"+
    "\6\3\1\311\1\312\3\3\1\313\1\314\1\315\1\316"+
    "\1\317\1\320\3\3\1\321\2\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\322"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\13\3\1\323\15\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\1\3\1\324"+
    "\27\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\12\3\1\325\16\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\326"+
    "\17\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\17\3\1\327\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\21\3\1\330"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\331\11\3\1\332\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\12\3\1\244\16\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\333\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\12\3\1\334\16\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\31\3\1\0\2\3\1\335"+
    "\1\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\336\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\322\6\3\1\337"+
    "\1\340\13\3\1\322\2\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\341\2\3"+
    "\1\342\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\15\3\1\244\3\3\1\116\7\3"+
    "\1\0\1\343\3\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\4\3\1\344\24\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\345"+
    "\17\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\22\3\1\346\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\347"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\350\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\21\3\1\351"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\14\3\1\352\1\3\1\353\1\75\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\354\14\3\1\355\2\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\356\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\357\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\12\3"+
    "\1\360\5\3\1\361\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\20\3\1\362\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\322\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\363\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\364\5\3\1\365\2\3\1\366\1\367"+
    "\1\370\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\14\3\1\371\14\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\21\3"+
    "\1\326\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\372\4\3\1\244\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\373\1\3\1\374\11\3\1\244\4\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\255\3\3\1\244\1\3\1\244\16\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\13\3\1\375\15\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\376\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\377\6\3\1\u0100\1\3\1\244\3\3"+
    "\1\u0101\4\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u0102\1\3\1\326\1\u0103"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\20\3\1\u0104\1\u0105\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u0106\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\u0107\12\3\1\u0108\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\13\3\1\244\15\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\322\6\3"+
    "\1\u0109\1\u010a\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\5\3\1\244\23\3\1\0"+
    "\1\353\3\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u010b\14\3\1\u010c\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\u010d\12\3\1\u010e\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\6\3\1\246\10\3"+
    "\1\242\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\u010f\25\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\u0110\7\3\1\u0111\14\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\u0112\1\u0113"+
    "\5\3\1\u0114\4\3\1\337\1\u0115\1\u0116\1\u0117\1\u0118"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u0119\2\3\1\244\4\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u011a\5\3\1\u011b\1\3\1\u011c\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u011d\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u011e\4\3\1\u011f"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u0120\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\u0121"+
    "\7\3\1\244\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u0122\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u0123\1\3\1\u0124\1\326\4\3\1\u0125\1\u0126"+
    "\1\u0127\1\u0128\4\3\1\u0129\1\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\12\3\1\u012a"+
    "\2\3\1\326\13\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u012b\1\u012c\11\3"+
    "\1\u012d\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\u012e\3\3\1\u012f\12\3"+
    "\1\u0130\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\16\3\1\u0131\12\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\11\3"+
    "\1\u0132\17\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u0133\7\3\1\244\3\3"+
    "\1\u0134\2\3\1\357\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\23\3\1\u0135\5\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\244\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\4\3\1\322\7\3"+
    "\1\u0136\14\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u0137\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u0138\4\3\1\u0139\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u013a\5\3"+
    "\1\u013b\1\u013c\4\3\1\u013d\1\u013e\1\u013f\1\u0140\7\3"+
    "\1\0\1\3\1\u0141\2\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\26\3\1\u0142\2\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\244\16\3\1\u0143\5\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u0144\1\u0145"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u0146\1\226\2\3\1\u0147\1\3"+
    "\1\65\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u0148\5\3\1\u0149\1\3"+
    "\1\u014a\11\3\1\65\4\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\4\3\1\u014b\20\3"+
    "\1\322\3\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\4\3\1\u014c\11\3\1\u014d\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\17\3\1\u014e\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\5\3\1\326\2\3"+
    "\1\75\7\3\1\u014f\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\353\6\3"+
    "\1\u0150\1\u0151\4\3\1\334\7\3\1\u0152\2\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u012c\6\3\1\u0153\4\3\1\353\2\3\1\u0154"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\4\3\1\u0155\11\3\1\u0156\10\3\1\322"+
    "\1\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0157\3\3\1\u0158\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u0159\1\3\1\u015a\3\3\1\u015b\1\u015c\2\3"+
    "\1\u015d\1\327\1\3\1\u015e\3\3\1\u015f\5\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u0160\1\u0161\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u0162\13\3"+
    "\1\u0163\1\u0164\1\u0165\1\u0166\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u0167"+
    "\20\3\1\322\5\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u0168\4\3\1\u0169"+
    "\3\3\1\u016a\14\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\20\3\1\65\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\302\1\u016b\3\3\1\u016c\5\3\1\u016d\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\303\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\2\u016e\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\2\3\1\u016f\1\3\1\u0170\24\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\23\3"+
    "\1\u0171\5\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\4\3\1\u0172\4\3\1\u0173\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\15\3\1\322\13\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\4\3\1\u0174\3\3"+
    "\1\u012c\4\3\1\u0175\13\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\u0176\1\3"+
    "\1\u0177\2\3\1\u0178\2\3\1\326\1\u0179\2\3\1\u0177"+
    "\1\u017a\1\3\1\u017b\1\u017c\1\u017d\3\3\1\u017e\2\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u017f\21\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u0180\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u0181\5\3\1\u0182\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u0183\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u0184\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u0185\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\u0186\15\3\1\357\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\1\3\1\u0180\11\3\1\255\5\3\1\u0187\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\20\3\1\u0188\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\3\3\1\u0189\25\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\u018a\1\3\1\u018b\5\3\1\u018c\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\50\u018d\1\u018e\1\u018f\1\u0190\1\u0191\3\u018d\10\3"+
    "\1\352\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\322\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u0192\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u0193\14\3\1\u0194\1\u0195"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u0138\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\24\3\1\u0196"+
    "\4\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\51\254\1\0\5\254\22\3\1\u016e\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\34\0\1\u0197\23\0\1\u0197\10\0\1\256\25\0\1\257"+
    "\1\0\1\257\13\0\1\257\3\0\50\261\1\u0198\1\263"+
    "\1\264\4\261\47\51\1\266\6\51\1\0\47\51\1\0"+
    "\6\51\1\267\4\3\1\374\24\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u0199"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\5\3\1\u019a\1\3\1\u019b\10\3\1\322"+
    "\1\u019c\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\75\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\u019d\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u019e\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\244\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\353\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\16\3"+
    "\1\353\12\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\301\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\16\3"+
    "\1\244\11\3\1\u019f\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u01a0\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\244\7\3\1\u01a1\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u01a2"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\12\3\1\u01a3\4\3\1\244\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u01a4\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u01a5\7\3\1\u01a6"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\353\4\3\1\u01a7\4\3\1\u01a8"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\u01a9\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\14\3\1\u01aa"+
    "\14\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\14\3\1\u01ab\14\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\u01ac"+
    "\17\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0183\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\244"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\6\3\1\353\22\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\16\3\1\u01ad"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u01ae\12\3\1\u01af\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\352\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\24\3\1\244\4\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\352\5\3\1\u0177\13\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u01b0"+
    "\6\3\1\244\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\22\3\1\u01b1\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u01b2\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\244\12\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u01b3\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u01b4\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\357\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\244\4\3\1\65"+
    "\5\3\1\u01b5\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\u01b6\12\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\6\3\1\u01b7\22\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\26\3\1\u01b8\2\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\15\3\1\334\13\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\346\11\3\1\u01b8"+
    "\2\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\322\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\27\3\1\244"+
    "\1\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u01b9\6\3\1\u01ba\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\6\3\1\u01bb\22\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\244\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\244\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\12\3\1\u01bc\16\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u012d\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u01bd\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\6\3\1\244\22\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\31\3\1\u01be\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u01bf"+
    "\1\u0150\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\226\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\327\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u01c0\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\u0110\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u01c1\7\3\1\u01c2\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\2\3\1\u01c3\4\3\1\u01c4\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\16\3"+
    "\1\u01c5\12\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u01c6\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\10\3"+
    "\1\327\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u01c7\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u01c8\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\6\3\1\u01c9\22\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\11\3"+
    "\1\u013c\17\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u01ca\12\3\1\u01cb\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u014c\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\3\3\1\u01cc\25\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\334\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u0157\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u01cd\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\4\3\1\u01ce\24\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\2\3\1\353\26\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\3\3\1\u01cf\25\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\2\3\1\u01d0\26\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\6\3\1\355\2\3"+
    "\1\u0182\10\3\1\u01d1\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u01a3\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\14\3\1\u01d2\5\3\1\u01d3\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u01d4\13\3\1\326\5\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\17\3\1\u01d5\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\15\3\1\244\13\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\255\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\23\3\1\65\5\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u01d6\1\u01d7"+
    "\11\3\1\u01d8\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u01d9\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\u01da\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\20\3\1\u01db\1\u01dc\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u01dd\12\3\1\u01de\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\u01df\2\3\1\u01e0\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u01e1\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u01e2\1\u01e3\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\13\3\1\u01e4"+
    "\15\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\15\3\1\u01e5\2\3\1\u01e6\1\u01e7\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u01e8\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\u01e9\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\14\3\1\u01ea\14\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u01eb\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\244\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u01ec\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\23\3\1\304\5\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u01ed\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\303\1\u01ee\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u01ef"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u01f0\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\301"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u016e\25\3\1\0\1\3\1\u01f1"+
    "\2\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u01f2\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u01dd\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u01f3\26\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\13\3\1\322\15\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\140\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\20\3\1\u01f4\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\1\3\1\u0176\1\3\1\u01f5\11\3\1\u01df\1\u01f6\1\3"+
    "\1\u01f7\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\352\1\u018a\21\3\1\u01f8"+
    "\2\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u01f9\1\u019e\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\12\3"+
    "\1\u01fa\16\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u01fb\10\3\1\u01fc\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u01fd\1\3\1\304\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\u01ce\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u0145\26\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\u01fe\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\5\3\1\244\23\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\322\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\22\3\1\u01ff\3\3\1\u0200\2\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\2\3\1\116\26\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\u0201\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u0202\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\244\5\3"+
    "\1\u0203\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\276\10\3\1\u0204\4\3"+
    "\1\u0105\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\u01d9\12\3\1\244\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\14\3\1\u0205\14\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u0206\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u0207\1\u0208\1\u0209\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\20\3"+
    "\1\u020a\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\322\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u020b\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u020c\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\14\3"+
    "\1\u020d\14\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\353\16\3\1\u020e\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u0177\16\3\1\u016e\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\15\3"+
    "\1\65\4\3\1\u020f\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\4\3\1\u0210\24\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u0211\1\75\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\5\3\1\u0212"+
    "\1\3\1\u0213\6\3\1\u0214\1\3\1\u0215\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u0216\16\3\1\244\1\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\12\3\1\355"+
    "\16\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\13\3\1\337\15\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\301"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\13\3\1\u0217\4\3\1\u0218\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u01d2\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\22\3\1\353\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u0219\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\334\12\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u021a\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u021b\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\u021c\10\3\1\u021d\13\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\u021e"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\11\3\1\u021f\1\u0220\3\3\1\u0221\2\3"+
    "\1\u0222\4\3\1\u0223\2\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\353\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\14\3\1\u0224\2\3\1\u0225\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\301\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u0226\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u0227\17\3\1\u016e\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\12\3\1\u0228\16\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\244\10\3\1\u0229\1\244\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\u022a\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\6\3\1\322\22\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u022b\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u022c\13\3\1\u022d"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\16\3\1\322\4\3\1\244\5\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\16\3\1\u022e\12\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\125\12\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u022f\10\3\1\u0230\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\244"+
    "\1\3\1\u01cc\4\3\1\u0231\12\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\4\3\1\244"+
    "\6\3\1\u0232\15\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\244\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\u0233\24\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\15\3\1\u0234\13\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\u0235\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u0236\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\24\3\1\u018b\4\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u0237\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\u0238\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\22\3\1\u0239\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\14\3\1\353\14\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u023a\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u0239\12\3\1\u023b\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u023c"+
    "\11\3\1\u023d\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u023e\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\3\3\1\244\3\3\1\u023f\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\21\3\1\u0240"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0241\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\u0242"+
    "\17\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0139\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\u0243"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\14\3\1\u020b\14\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\27\3\1\322"+
    "\1\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u0244\26\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\10\3\1\u0245"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\17\3\1\u0246\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\5\3\1\u0247"+
    "\23\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\27\3\1\u0248\1\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\23\3\1\244"+
    "\5\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\363\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u015d"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\26\3\1\246\1\3\1\u0249\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\50\u018d"+
    "\1\u018e\1\u018f\1\u0190\1\u024a\3\u018d\50\u024b\1\u018e\1\0"+
    "\1\u024b\1\0\3\u024b\50\u018d\1\u024c\1\u018f\1\u0190\1\u024a"+
    "\3\u018d\50\u024a\1\u024d\1\u018f\1\u024e\1\u0191\3\u024a\16\3"+
    "\1\u0105\4\3\1\u024f\5\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\20\3\1\u0250\1\3"+
    "\1\u0251\1\3\1\355\4\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\14\3\1\u010b\5\3"+
    "\1\75\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\14\3\1\u0252\14\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\30\3"+
    "\1\u0253\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\40\0\1\u0254\1\0\1\u0254\13\0\1\u0254\3\0"+
    "\25\3\1\322\3\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u0255\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u0256\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u0257\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u0105\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\20\3\1\u0258\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u0259\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\u010f\6\3\1\u025a"+
    "\5\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u025b\26\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\4\3\1\322"+
    "\24\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\u025c\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\10\3\1\u0145"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\17\3\1\353\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u025d"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u025e\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u025f"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u0260\26\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\12\3\1\u0261"+
    "\16\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\353\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\374"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\11\3\1\u0262\17\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\10\3\1\u0263"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0264\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\21\3\1\u0265"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\20\3\1\353\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u0266"+
    "\14\3\1\u0267\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\1\3\1\u0268\27\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u0269\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\75\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u026a\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\374\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u026b\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u0177\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\326\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u026c\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\12\0"+
    "\1\u026d\47\0\24\3\1\u026e\4\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\14\3\1\346"+
    "\14\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\15\3\1\u026f\13\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\14\3\1\u025f"+
    "\14\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\u01b3\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u0270"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u0271\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\334"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\24\3\1\u0272\4\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u0273"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0274\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u019e"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\13\3\1\u0275\15\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\20\3\1\u0244"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u016e\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u0276"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\17\3\1\u0277\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u0278"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\1\3\1\327\27\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\304"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0270\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u01ce"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\u0111\11\3\1\u01d9\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u0279\26\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\u01a7\14\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u027a\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\1\3\1\244\27\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\u027b\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u027c\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u027d\26\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u027e\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\u027f\24\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u0139\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\304\24\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u0280\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u0281\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\23\3\1\u0282\5\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u0283\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\56\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\3\3\1\u0284\25\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\22\3\1\u0285\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u0286\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\4\3\1\u0287\24\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\15\3\1\u0288\13\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u022a\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u0289\26\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\20\3\1\u028a\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\u028b\24\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\u0156\12\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\u028c\24\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\322\14\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\3\3\1\u028d\25\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\30\3\1\u028e\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u028f\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u0290\26\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u0291\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\22\3\1\u0292\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u0293\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\1\3\1\u0176\27\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\10\3"+
    "\1\u015d\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\4\3\1\u0294\24\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\304\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\5\3\1\u0295\23\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\17\3"+
    "\1\u018b\11\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u0296\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u0297\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\22\3\1\u01a9\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u0298\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u0299\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u029a\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u029b\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\15\3"+
    "\1\u029c\13\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\21\3\1\u029d\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\303\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u029e\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u029f\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\301\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\u02a0\24\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u02a1\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u02a2\12\3\1\u02a3\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\17\3\1\246\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u02a4\21\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u02a5\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\u02a6\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u02a7\26\3"+
    "\1\0\1\u02a8\3\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u0244\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\3\3\1\u02a9"+
    "\25\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\17\3\1\u02aa\1\3\1\u02ab\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\14\3\1\u02ac\14\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u02ad\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u016e\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u02ae\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u02af\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u015d\1\u02b0\11\3"+
    "\1\u02b1\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u02b2\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u02b3\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u02b4\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u02b5\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\21\3\1\u02b6\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\10\3"+
    "\1\u02b7\11\3\1\u02b8\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u0107\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u02b9\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\u02ba\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\27\3\1\u02bb\1\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\u02bc\17\3"+
    "\1\u0249\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\22\3\1\u01af\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\10\3\1\u02bd"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\75\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\u02be"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u02bf\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\3\3\1\u02c0"+
    "\25\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\16\3\1\u02c1\12\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\16\3\1\u02c2"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\17\3\1\355\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\21\3\1\u028b"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\13\3\1\u02c3\15\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u02c4"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u02c5\13\3\1\u0244\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u02c6\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\u02c7\6\3\1\u02c8"+
    "\3\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\12\3\1\u02c9\16\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u02ca"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\31\3\1\0\1\244\3\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u02cb\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\20\3\1\u02cc\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u0299\6\3"+
    "\1\u013c\17\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u02cd\1\u02ce\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u02cf\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u02d0\10\3\1\326"+
    "\15\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\22\3\1\u02d1\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\27\3\1\326"+
    "\1\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u029a\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\10\3\1\u019e"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\346\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\12\3\1\337"+
    "\16\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u0257\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u0219"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\5\3\1\u019a\23\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\u02d2"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\50\u024a\1\0\1\u018f\1\u024e\55\u024a\1\u018f"+
    "\1\u024e\4\u024a\3\3\1\121\25\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\6\3\1\u02d3"+
    "\22\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\u0111\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\14\3\1\u02d4"+
    "\14\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\4\3\1\u02d5\14\3\1\u02d6\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\75\26\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\13\3\1\u016e\15\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u016e\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u02d7\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u02d8\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u02d9\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u02da\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u0251\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u01b3\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\22\3\1\u02db\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\16\3\1\u025e\12\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u02dc\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u0239\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u02dd\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u02ab\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u01a3\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\30\3\1\u0249\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\22\3\1\u0150\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\10\3"+
    "\1\u02de\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\22\3\1\u02df\1\3\1\244\4\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\13\3\1\u02e0\15\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\17\3\1\u01f1\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\26\3\1\326\2\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u02e1\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\35\0\1\u02e2\24\0\15\3\1\u0231\13\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\21\3"+
    "\1\u02e3\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\304\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\16\3"+
    "\1\244\3\3\1\u012d\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\322\6\3"+
    "\1\322\3\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\13\3\1\u0244\15\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u02e4\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\u02cf\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\20\3"+
    "\1\244\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u02e5\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u02e6\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u02e7\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u02e8\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\327\10\3\1\u02e9\14\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u02ea\21\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u02eb\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u02ec\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u02ed\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\121\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\3\3\1\u02ee\25\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\u02ef\17\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u01b3\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u02f0\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u02f1\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\u02f2\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u01bf\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u02f3\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\5\3\1\u016e\23\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\12\3\1\u02f4\16\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\12\3\1\u02f5\16\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\12\3\1\326\16\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u02db\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u0105\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\17\3\1\u02f6\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u02f7\21\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\3\3\1\u0255\25\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\17\3\1\u02f8\11\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u02f9\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u02fa\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u02ea\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u02fb\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u0145\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u018b\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\355\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\u02fc\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\u02fd\27\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\u02c6\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u02fe\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u02ff\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\u0300\1\3"+
    "\1\244\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\21\3\1\u01d4\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\u0301\24\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u0302\26\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u0303\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u0304\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\12\3"+
    "\1\322\16\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\21\3\1\u0305\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\352\16\3\1\u01cd\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\u012c\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u0306\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u0307\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u0308\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u0309\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u030a\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u019e\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u0145\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\20\3\1\u030b\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u030c\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u030d\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u030e\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\11\3\1\u01f1\17\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\u02c6\17\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u030f\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\75\5\3\1\u029c\13\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\20\3"+
    "\1\u0310\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\12\3\1\u0311\16\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u0312\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\u0313\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u02c6\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\30\3\1\u0314\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\1\3\1\u0315"+
    "\6\3\1\u0316\6\3\1\u0317\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u0318"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\11\3\1\u0244\17\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u018a"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\30\3\1\u0319\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u031a\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u031b\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u0244\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\4\3\1\u031c\24\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u031d\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\u031e\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\75\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\u031f\17\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\335\7\3"+
    "\1\304\2\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u0320\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u0321\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u0322\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\4\3"+
    "\1\244\24\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u0323\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\24\3"+
    "\1\226\4\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\14\3\1\u015d\14\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u0324\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\347\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\11\3"+
    "\1\u0325\17\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\26\3\1\322\2\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u0326\6\3\1\244\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\17\3\1\u029a\11\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\15\3\1\334\6\3\1\244\4\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\334\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u0327\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\20\3"+
    "\1\u0328\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\12\0\1\u0329\47\0\22\3\1\u032a\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u032b\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\75\1\u0111"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\244\7\3\1\244\16\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\15\3\1\u031e\5\3\1\322\5\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\20\3\1\u031e"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u032c\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u032d"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\4\3\1\u032e\24\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\16\3\1\u0300"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\11\3\1\335\17\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\u018a"+
    "\17\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\20\3\1\u032f\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\244"+
    "\1\3\1\u028b\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\22\3\1\u0330\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u0331\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\u0332\14\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u0333\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u0334\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u0335\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u0301\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\327\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\16\3\1\u0336\12\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u0337\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\u0139\14\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u015d\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u0338\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\30\3\1\u0339\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\355\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\352\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u033a\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u033b\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\15\3\1\u033c\13\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\12\3"+
    "\1\u0189\1\3\1\u033d\14\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\15\3\1\u033e\13\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\12\3\1\u033f\16\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u0340\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u0341\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\u0342\3\3"+
    "\1\u02e9\14\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\334\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\244\12\3\1\u0343\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u0344\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u0345\21\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\13\3\1\u02c6\15\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u0346\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\3\3\1\u0347\25\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u0348\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\20\3\1\u0349\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\10\3\1\u034a\20\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\2\3\1\u0324\26\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\312\17\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\10\3\1\u034b\20\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\u034c\17\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u034d\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\334\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u0303\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\20\3\1\322\1\u034e\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\17\3\1\u034f"+
    "\11\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\11\3\1\u0151\17\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u0350"+
    "\26\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\4\3\1\u0351\24\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\30\3\1\u0352"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\20\3\1\u0353\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\12\3\1\u0354\16\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\30\3\1\u0355\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\6\3\1\327\22\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\23\0"+
    "\1\u0356\36\0\25\3\1\u0243\3\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\7\3\1\u0357"+
    "\21\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u0358\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\11\3\1\u0359"+
    "\17\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u035a\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\30\3\1\u035b"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\21\3\1\u0231\7\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\u035c\27\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\2\3\1\u035d\26\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\13\3\1\u02df\15\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\u035e\21\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\25\3\1\u0251\3\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\16\3\1\u035f\12\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\20\3\1\u0360\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u0361\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\14\3\1\u033d\14\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\15\3\1\u019e\13\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\4\3\1\u0362\24\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u01bc\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\326\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u0363\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u0364\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u0365\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\22\3\1\u0366\6\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\3\3\1\u0367\25\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u0368\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\30\3\1\u0369\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\2\3\1\u036a\26\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\2\3\1\u036b\26\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\21\3\1\u036c\7\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u036d\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\4\3\1\u010f\24\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\7\3\1\u036e\21\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u036f\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u0251\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\17\3\1\327\2\3\1\u0370"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\31\3\1\0\3\3\1\244\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\23\3\1\326\5\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\312\4\3\1\u0371\1\3\1\u0372\10\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\7\3\1\334\12\3\1\u012d\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\30\3"+
    "\1\u0373\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\3\3\1\u0374\13\3\1\u02d2\1\3\1\u0375"+
    "\7\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u01a3\26\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u0376"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\30\3\1\u0377\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\1\3\1\u0378\27\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\22\3\1\u0379\6\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\244\1\301"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u037a\26\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\21\3\1\u02d6"+
    "\6\3\1\u0319\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\334\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u037b\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\u0150\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u02b9\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\u037c\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\11\3"+
    "\1\u037d\17\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\11\3\1\u0324\17\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u037e\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u037f\7\3\1\u0244\1\3"+
    "\1\u033d\1\u0380\3\3\1\u0305\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u0381"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\4\3\1\u01a3\24\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u0382"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\244\12\3\1\u01cd\6\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\30\3\1\u0383\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\21\3\1\u0243\7\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\20\3"+
    "\1\u0384\10\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\10\3\1\u0385\20\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u0374\12\3\1\u0386\1\u02d2\11\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\20\3\1\76"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u0387\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\16\3\1\u0388"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\22\3\1\u0389\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\14\3\1\u038a"+
    "\14\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\11\3\1\u038b\17\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\16\3\1\244"+
    "\11\3\1\u038c\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\16\3\1\u02c7\12\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\30\3"+
    "\1\u038d\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u038e\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u02ee"+
    "\5\3\1\u038f\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\65\25\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\10\3"+
    "\1\337\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\13\3\1\255\15\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u0390\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\4\3\1\u0391\1\3\1\u0392\22\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\6\3\1\u0393\22\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\21\3\1\u0394\7\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\31\3\1\0\1\3\1\u0395\2\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\31\3\1\0\1\353"+
    "\3\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u01ce\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u0396\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u0397\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u0398\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\3\3\1\u0399\1\u0215\4\3\1\312\4\3\1\u039a\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\11\3\1\u039b\17\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\16\3\1\244\11\3"+
    "\1\u0352\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\16\3\1\u039c\1\u02d2\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\11\3"+
    "\1\u039d\17\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\22\3\1\u039e\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\3\3"+
    "\1\u039f\25\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u03a0\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\10\3"+
    "\1\u03a1\20\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u03a2\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\21\3"+
    "\1\u03a3\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\20\3\1\u03a4\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\12\3"+
    "\1\u03a5\16\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\2\3\1\u03a6\26\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\15\3"+
    "\1\u03a7\13\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\14\3\1\u0323\14\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u03a8\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\16\3\1\u03a9\11\3\1\u03aa\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\11\3\1\u0277\17\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\14\3\1\352\14\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\4\3\1\u03ab\24\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\17\3\1\u03ac\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\16\3\1\u0214\12\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\7\3\1\u03ad\21\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\21\3\1\u03ae\7\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\30\3\1\u03af\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\12\3"+
    "\1\u03b0\16\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\7\3\1\u03b1\21\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\21\3"+
    "\1\u03b2\7\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\30\3\1\u03b3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\10\3\1\u03b4"+
    "\20\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\10\3\1\244\20\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\3\3\1\140"+
    "\25\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\2\3\1\u03b5\26\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u03b6"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\21\3\1\u03b7\7\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\22\3\1\u03b8"+
    "\6\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\20\3\1\u03b9\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\2\3\1\u03ba"+
    "\15\3\1\u0126\10\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\20\3\1\u01a9\10\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\26\3\1\u03bb\2\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u03bc\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\24\3\1\u03bd\4\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u03be\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\22\3\1\u03bf\6\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\3\3\1\u03c0\25\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\10\3\1\u03c1\20\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\11\3\1\u03c2\17\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\15\3\1\u03c3\13\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\10\3\1\u03c4\20\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\1\3\1\u03c5\27\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\17\3\1\u03c6\11\3\1\0"+
    "\4\3\1\0\1\3\1\0\1\3\10\0\2\3\3\0"+
    "\17\3\1\u03c7\11\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\3\10\0\2\3\3\0\30\3\1\u03c8\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\7\3"+
    "\1\u03b2\21\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u03c9\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\22\3"+
    "\1\u03ca\6\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\17\3\1\u03cb\11\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\30\3"+
    "\1\u03cc\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\20\3\1\u0215\10\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\30\3\1\u03cd"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\20\3\1\u03b2\10\3\1\0\4\3\1\0\1\3"+
    "\1\0\1\3\10\0\2\3\3\0\7\3\1\u03ce\21\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\10\0\2\3"+
    "\3\0\15\3\1\u03cf\2\3\1\u0215\10\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\15\3"+
    "\1\u03d0\13\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\12\3\1\u03d1\16\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\2\3"+
    "\1\u03d2\26\3\1\0\4\3\1\0\1\3\1\0\1\3"+
    "\10\0\2\3\3\0\3\3\1\u03d3\25\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\10\0\2\3\3\0\30\3"+
    "\1\u03d4\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\7\3\1\u03d5\21\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\16\3\1\u03d6"+
    "\12\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\23\3\1\u025a\5\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0\20\3\1\u01f7"+
    "\10\3\1\0\4\3\1\0\1\3\1\0\1\3\10\0"+
    "\2\3\3\0\22\3\1\u019e\6\3\1\0\4\3\1\0"+
    "\1\3\1\0\1\3\10\0\2\3\3\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     9,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     0,  9,  9,  0,  9,  0,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  9,  0, 
     0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  9,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
	private StringBuffer commentBuffer = new StringBuffer();
	private int commentNestCount = 0;
	private int commentStartLine = 0;
	private int commentStartChar = 0;

    /**
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t);
    }

    public SQLFormatter(){}

//    /**
//     * Prints out tokens from a file or System.in.
//     * If no arguments are given, System.in will be used for input.
//     * If more arguments are given, the first argument will be used as
//     * the name of the file to use as input
//     *
//     * @param args program arguments, of which the first is a filename
//     */
//    public static void main(String[] args) {
//        String st ="\n\t";
//        System.out.println(st.trim().length());
//        String s = "select a.service_request_id, a.jdo_class, a.additional_agreements, " +
//                "a.brker_currency_currency_id, a.broker_exchange_rate, a.cost_calculation, " +
//                "a.old_broker_exchange_rate, a.old_mark_up_amount, a.old_mark_up_percentage, a.old_prchs_crrn_currency_id, " +
//                "a.old_sllng_crrn_currency_id, a.old_selling_exchange_rate, a.use_broker_amounts2 " +
//                "from service_request AS a " +
//                "where a.additional_agreements <> 'bal' " +
//                "where not exists (select 1 " +
//                "                   from linked_document AS b " +
//                                    "where a.service_request_id = b.service_request_id) " +
//                "and (not exists (select 1 " +
//                "                   from s_r_history AS c " +
//                "                   where a.service_request_id = c.service_request_id) " +
//                "      or not exists (select 1 from service_request_service_request AS d " +
//                "                       where a.service_request_id = d.service_request_id))";
//
//        System.out.println(SQLFormatter.format(s));
//        System.out.println(SQLFormatter.format("\n" +
//                "select a.service_request_id,\n" +
//                "       a.jdo_class,\n" +
//                "       a.additional_agreements,\n" +
//                "       a.old_sllng_crrn_currency_id,\n" +
//                "       a.old_selling_exchange_rate,\n" +
//                "       a.use_broker_amounts2\n" +
//                "  from \tservice_request AS a JOIN currency AS b ON (a.brker_currency_currency_id = b.currency_id)\n" +
//                "JOIN grp AS c ON (a.customer = c.grp_id)\n" +
//                "JOIN currency AS d \n" +
//                "ON (c.currency_id = d.currency_id)\n" +
//                "JOIN grp AS e \n" +
//                "ON (a.original_s_m = e.grp_id)\n" +
//                " where b.nme <> 'bla'\n" +
//                "   and d.nme = 'bla'\n" +
//                "   and not exists (select 1\n" +
//                "                     from grp AS f\n" +
//                "                    where e.grp_id = f.service_management)"));
//
//        System.out.println(SQLFormatter.format("SELECT a.service_request_id,\n" +
//                "       a.jdo_class,\n" +
//                "       a.additional_agreements,\n" +
//                "       a.old_broker_exchange_rate,\n" +
//                "       a.old_mark_up_amount,\n" +
//                "       a.old_mark_up_percentage,\n" +
//                "       a.old_prchs_crrn_currency_id,\n" +
//                "       a.old_sllng_crrn_currency_id,\n" +
//                "       a.old_selling_exchange_rate,\n" +
//                "       a.use_broker_amounts2\n" +
//                "  FROM service_request AS a JOIN currency AS b ON (a.brker_currency_currency_id = b.currency_id)" +
//                "  JOIN grp AS c ON (a.customer = c.grp_id) \n" +
//                "  JOIN currency AS d ON (c.currency_id = d.currency_id) \n" +
//                " WHERE a.additional_agreements = ' c '\n" +
//                "   AND NOT EXISTS (SELECT 1\n" +
//                "                     FROM linked_document AS e\n" +
//                "                    WHERE a.service_request_id = e.service_request_id) \n" +
//                "   AND b.symbol = d.symbol \n" +
//                "   FOR SELECT"));
//
//        System.out.println(SQLFormatter.format("SELECT item_id,\n" +
//                "       category_id,\n" +
//                "       code,\n" +
//                "       description,\n" +
//                "       jdo_version\n" +
//                "  FROM item\n" +
//                "   FOR UPDATE OF item"));
//
//    }

    ////////////////////////////////////////////////////////////////////////////////////////////////

        public static class Line {
        private int mark = 0;
        StringBuffer buff = new StringBuffer();


        public Line(int mark) {
            this.mark = mark;
        }

        public void add(SQLFormatterToken t) {
            switch (t.getID()) {
                case SQLFormatterToken.RESERVED_NEWLINE:
                    t.contents = t.contents.toUpperCase();
                    if (mark == 0) {
                        buff.append(t.getContents());
                        buff.append(" ");
                    } else if (isEmpty()) {
                        String s = t.getContents();
                        int lenght = s.length();
                        buff.append(pad((mark - lenght) - 1));
                        buff.append(t.getContents());
                        buff.append(" ");
                    } else {
                        buff.append(t.getContents());
                        buff.append(" ");
                    }
                    break;
                case SQLFormatterToken.RESERVED_WORD:
                    t.contents = t.contents.toUpperCase();
                    if (isEmpty()){
                        String s = t.getContents();
                        int lenght = s.length();
                        buff.append(pad(mark));
                        buff.append(t.getContents());
                        buff.append(" ");
                    } else {
                        buff.append(t.getContents());
                        buff.append(" ");
                    }
                    break;
                default:
                    if (isFirst()) {
                        String s = t.getContents();
                        int lenght = s.length();
                        buff.append(pad(mark));
                        buff.append(t.getContents());
                    } else {
                        buff.append(t.getContents());
                    }
            }
        }

        public int getMark(){
            return buff.length();
        }

        private boolean isFirst(){
            return  buff.toString().trim().equals("");
        }

        private boolean isEmptyToString() {
            return (buff.toString().trim().length() == 0);
        }

        private boolean isEmpty() {
            return (buff.toString().length() == 0);
        }



        public String toString() {
            buff.append("\n");
            if (isEmptyToString())return "";
            return buff.toString();
        }
    }

    private static int[] mark = new int[50];
    private static int currentIndent = 0;

    private static int getCurrentMark(){
        return mark[currentIndent];
    }

    private static void setCurrentMark(int newMark) {
        mark[currentIndent] = newMark ;
    }

    private static String pad(int lenght) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < lenght; i++) {
            buf.append(" ");
        }
        return buf.toString();
    }


    public static String format(String sql){
        currentIndent = 0;
        mark = new int[50];
        ByteArrayInputStream inputStream = new ByteArrayInputStream(sql.getBytes());
        InputStream in = inputStream;

        SQLFormatter shredder = new SQLFormatter(in);
        SQLFormatterToken t;
        SQLFormatterToken lastToken = null;
        ArrayList list = new ArrayList();
        Line line = new Line(getCurrentMark());
        list.add(line);
        boolean inFrom = false;

        try {
            while ((t = (SQLFormatterToken) shredder.getNextToken()) != null) {
                if (t.getID() != SQLFormatterToken.WHITE_SPACE) {
//                    System.out.println(t.toString());

                    switch (t.getID()) {
                        case SQLFormatterToken.RESERVED_MAYBE:
                            if (lastToken != null && lastToken.getID() == SQLFormatterToken.STARTMARK) {
                                // we carry on in this line, but we mark the spot
                                t.ID = SQLFormatterToken.RESERVED_NEWLINE;
                                line.add(t);
                                setCurrentMark(line.getMark());
                            } else if (lastToken != null && lastToken.getID() == SQLFormatterToken.RESERVED_NEWLINE &&
                                    "update".equalsIgnoreCase(t.getContents())) {
                                // we just carry on in this line
                                line.add(t);
                                lastToken = t;
                            } else {
                                // we start at a new line
                                line = new Line(getCurrentMark());
                                list.add(line);
                                t.ID = SQLFormatterToken.RESERVED_NEWLINE;
                                line.add(t);
                                setCurrentMark(line.getMark());
                            }
                            lastToken = t;
                            break;
                        case SQLFormatterToken.RESERVED_NEWLINE:
                            if ("from".equalsIgnoreCase(t.getContents())){
                                inFrom = true;
                            } else {
                                inFrom = false;
                            }
                            line = new Line(getCurrentMark());
                            list.add(line);
                            t.ID = SQLFormatterToken.RESERVED_NEWLINE;
                            line.add(t);

                            lastToken = t;
                            break;
                        case SQLFormatterToken.RESERVED_WORD:
                            if (lastToken == null){
                               int lenght = 6 - t.getContents().length();
                               if (lenght > 0){
                                   t.contents = pad(lenght) + t.getContents();
                               }
                            } else if (lastToken.ID == SQLFormatterToken.IDENTIFIER ||
                                    lastToken.ID == SQLFormatterToken.OPERATOR ||
                                    lastToken.ID == SQLFormatterToken.LITERAL_INTEGER ||
                                    lastToken.ID == SQLFormatterToken.RESERVED_MAYBE){
                                t.contents = " " + t.getContents();
                            }
                            line.add(t);

                            if (lastToken == null || lastToken.ID == SQLFormatterToken.STARTMARK){
                                setCurrentMark(line.getMark());
                            }
                            lastToken = t;
                            break;
                        case SQLFormatterToken.OPERATOR:
                            if (lastToken.ID != SQLFormatterToken.OPERATOR) {
                                t.contents = " " + t.getContents();
                            }
                            line.add(t);

                            lastToken = t;
                            break;

                        case SQLFormatterToken.LITERAL_STRING:
                        case SQLFormatterToken.LITERAL_BIT_STRING:
                        case SQLFormatterToken.LITERAL_INTEGER:
                        case SQLFormatterToken.LITERAL_FLOAT:
                            if (lastToken.ID == SQLFormatterToken.OPERATOR) {
                                t.contents = " " + t.getContents();
                            }

                            line.add(t);


                            lastToken = t;
                            break;
                        case SQLFormatterToken.IDENTIFIER:

                            if (lastToken.ID == SQLFormatterToken.OPERATOR ||
                                    lastToken.ID == SQLFormatterToken.IDENTIFIER) {
                                t.contents = " " + t.getContents();
                            }

                            line.add(t);


                            lastToken = t;
                            break;
                        case SQLFormatterToken.ENDLINE:
                            line.add(t);
                            if (!lastToken.isLiteral()){
                                line = new Line(getCurrentMark());
                                list.add(line);
                            }

                            lastToken = t;
                            break;
                        case SQLFormatterToken.ENDMARK:
//                            t.contents = t.getContents()+" ";
                            line.add(t);
                            currentIndent--;
                            if (inFrom) {
                                line = new Line(getCurrentMark());
                                list.add(line);
                            }
                            lastToken = t;
                            break;
                        case SQLFormatterToken.STARTMARK:
                            currentIndent ++;
                            line.add(t);

                            lastToken = t;
                            break;
                        default:
                            line.add(t);
                            lastToken = t;
                            break;
                    }

                }
            }
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use Options | File Templates.
        }
        StringBuffer buffer = new StringBuffer();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            buffer.append(((Line) iter.next()).toString());
        }
        return buffer.toString();
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}

	public void setReader(java.io.Reader in){
        this.yy_reader = in;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQLFormatter(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SQLFormatter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[44321];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 33: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.STARTMARK;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 983: break;
        case 27: 
        case 36: 
        case 39: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.OPERATOR;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 984: break;
        case 35: 
        case 38: 
        case 175: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.SEPARATOR;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 985: break;
        case 42: 
        case 184: 
          { 
	commentNestCount--;
    commentBuffer.append(yytext());
	if (commentNestCount == 0){
		nextState = YYINITIAL;
		lastToken = SQLFormatterToken.COMMENT_TRADITIONAL;
		SQLFormatterToken t = (new SQLFormatterToken(lastToken,commentBuffer.toString(),commentStartLine,commentStartChar,commentStartChar+commentBuffer.length(),nextState));
		yybegin(nextState);
		return(t);
	}
 }
        case 986: break;
        case 54: 
        case 57: 
        case 90: 
        case 93: 
        case 96: 
        case 102: 
        case 108: 
        case 144: 
        case 151: 
        case 154: 
        case 163: 
        case 196: 
        case 199: 
        case 211: 
        case 215: 
        case 223: 
        case 226: 
        case 228: 
        case 239: 
        case 257: 
        case 263: 
        case 265: 
        case 278: 
        case 319: 
        case 333: 
        case 379: 
        case 395: 
        case 405: 
        case 408: 
        case 418: 
        case 441: 
        case 442: 
        case 447: 
        case 468: 
        case 474: 
        case 481: 
        case 482: 
        case 498: 
        case 550: 
        case 553: 
        case 563: 
        case 565: 
        case 673: 
        case 681: 
        case 698: 
        case 704: 
        case 709: 
        case 731: 
        case 738: 
        case 768: 
        case 777: 
        case 803: 
        case 814: 
        case 831: 
        case 836: 
        case 837: 
        case 847: 
        case 853: 
        case 857: 
        case 863: 
        case 889: 
        case 890: 
        case 893: 
        case 909: 
        case 924: 
        case 961: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.RESERVED_WORD;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 987: break;
        case 55: 
        case 188: 
        case 251: 
        case 647: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.RESERVED_NEWLINE;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 988: break;
        case 174: 
        case 595: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.LITERAL_FLOAT;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 989: break;
        case 185: 
          { 
    nextState = COMMENT;
    commentBuffer.append(yytext());
	commentNestCount++;
	yybegin(nextState);
 }
        case 990: break;
        case 745: 
        case 774: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.RESERVED_MAYBE;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 991: break;
        case 29: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.LITERAL_INTEGER;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 992: break;
        case 177: 
        case 407: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.LITERAL_STRING;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 993: break;
        case 397: 
        case 587: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ERROR_UNCLOSED_BIT_STRING;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 994: break;
        case 588: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.LITERAL_BIT_STRING;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 995: break;
        case 508: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.COMMENT_TRADITIONAL;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 996: break;
        case 412: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ERROR;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 997: break;
        case 26: 
        case 37: 
        case 41: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ERROR;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 998: break;
        case 171: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.COMMENT_END_OF_LINE;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 999: break;
        case 180: 
          { 
    nextState = COMMENT;
	commentBuffer.setLength(0);
    commentBuffer.append(yytext());
	commentNestCount = 1;
	commentStartLine = yyline;
	commentStartChar = yychar;
	yybegin(nextState);
 }
        case 1000: break;
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 28: 
        case 31: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 94: 
        case 95: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 152: 
        case 153: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 172: 
        case 186: 
        case 187: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 197: 
        case 198: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 212: 
        case 213: 
        case 214: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 224: 
        case 225: 
        case 227: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 264: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 380: 
        case 381: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 409: 
        case 410: 
        case 411: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 443: 
        case 444: 
        case 446: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 488: 
        case 489: 
        case 490: 
        case 491: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 509: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 551: 
        case 552: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 564: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 590: 
        case 591: 
        case 592: 
        case 593: 
        case 594: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 648: 
        case 649: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 654: 
        case 655: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 660: 
        case 661: 
        case 662: 
        case 663: 
        case 664: 
        case 665: 
        case 666: 
        case 667: 
        case 668: 
        case 669: 
        case 670: 
        case 671: 
        case 672: 
        case 674: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 699: 
        case 700: 
        case 701: 
        case 702: 
        case 703: 
        case 705: 
        case 706: 
        case 707: 
        case 708: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 714: 
        case 715: 
        case 716: 
        case 717: 
        case 718: 
        case 719: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 732: 
        case 733: 
        case 734: 
        case 735: 
        case 736: 
        case 739: 
        case 740: 
        case 741: 
        case 742: 
        case 743: 
        case 744: 
        case 746: 
        case 747: 
        case 748: 
        case 749: 
        case 750: 
        case 751: 
        case 752: 
        case 753: 
        case 754: 
        case 755: 
        case 756: 
        case 757: 
        case 758: 
        case 759: 
        case 760: 
        case 761: 
        case 762: 
        case 763: 
        case 764: 
        case 765: 
        case 766: 
        case 767: 
        case 769: 
        case 770: 
        case 771: 
        case 772: 
        case 773: 
        case 775: 
        case 776: 
        case 778: 
        case 779: 
        case 780: 
        case 781: 
        case 782: 
        case 783: 
        case 784: 
        case 785: 
        case 786: 
        case 787: 
        case 788: 
        case 789: 
        case 790: 
        case 791: 
        case 792: 
        case 793: 
        case 794: 
        case 795: 
        case 796: 
        case 797: 
        case 798: 
        case 799: 
        case 800: 
        case 801: 
        case 802: 
        case 804: 
        case 805: 
        case 806: 
        case 807: 
        case 809: 
        case 810: 
        case 811: 
        case 812: 
        case 813: 
        case 815: 
        case 816: 
        case 817: 
        case 818: 
        case 819: 
        case 820: 
        case 821: 
        case 822: 
        case 823: 
        case 824: 
        case 825: 
        case 826: 
        case 827: 
        case 828: 
        case 829: 
        case 830: 
        case 832: 
        case 833: 
        case 834: 
        case 835: 
        case 838: 
        case 839: 
        case 840: 
        case 841: 
        case 842: 
        case 843: 
        case 844: 
        case 845: 
        case 846: 
        case 848: 
        case 849: 
        case 850: 
        case 851: 
        case 852: 
        case 854: 
        case 855: 
        case 856: 
        case 858: 
        case 859: 
        case 860: 
        case 861: 
        case 862: 
        case 864: 
        case 865: 
        case 866: 
        case 867: 
        case 868: 
        case 869: 
        case 870: 
        case 871: 
        case 872: 
        case 873: 
        case 874: 
        case 875: 
        case 876: 
        case 877: 
        case 878: 
        case 879: 
        case 880: 
        case 881: 
        case 882: 
        case 883: 
        case 884: 
        case 885: 
        case 886: 
        case 887: 
        case 888: 
        case 891: 
        case 892: 
        case 894: 
        case 895: 
        case 896: 
        case 897: 
        case 898: 
        case 899: 
        case 900: 
        case 901: 
        case 902: 
        case 903: 
        case 904: 
        case 905: 
        case 906: 
        case 907: 
        case 908: 
        case 910: 
        case 911: 
        case 912: 
        case 913: 
        case 914: 
        case 915: 
        case 916: 
        case 917: 
        case 918: 
        case 919: 
        case 920: 
        case 921: 
        case 922: 
        case 923: 
        case 925: 
        case 926: 
        case 927: 
        case 928: 
        case 929: 
        case 930: 
        case 931: 
        case 932: 
        case 933: 
        case 934: 
        case 935: 
        case 936: 
        case 937: 
        case 938: 
        case 939: 
        case 940: 
        case 941: 
        case 942: 
        case 943: 
        case 944: 
        case 945: 
        case 946: 
        case 947: 
        case 948: 
        case 949: 
        case 950: 
        case 951: 
        case 952: 
        case 953: 
        case 954: 
        case 955: 
        case 956: 
        case 957: 
        case 958: 
        case 959: 
        case 960: 
        case 962: 
        case 963: 
        case 964: 
        case 965: 
        case 966: 
        case 967: 
        case 968: 
        case 969: 
        case 970: 
        case 971: 
        case 972: 
        case 973: 
        case 974: 
        case 975: 
        case 976: 
        case 977: 
        case 978: 
        case 979: 
        case 980: 
        case 981: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.IDENTIFIER;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 1001: break;
        case 0: 
        case 30: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.WHITE_SPACE;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 1002: break;
        case 398: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ERROR_BAD_BIT_STRING;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 1003: break;
        case 1: 
        case 40: 
          { 
    nextState = COMMENT;
    commentBuffer.append(yytext());
	yybegin(nextState);
 }
        case 1004: break;
        case 178: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 1005: break;
        case 32: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ENDLINE;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 1006: break;
        case 34: 
          { 
    nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ENDMARK;
    String text = yytext();
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
	yybegin(nextState);
	return(t);
 }
        case 1007: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case COMMENT:
              { 
	nextState = YYINITIAL;
	lastToken = SQLFormatterToken.ERROR_UNCLOSED_COMMENT;
	SQLFormatterToken t = (new SQLFormatterToken(lastToken,commentBuffer.toString(),commentStartLine,commentStartChar,commentStartChar+commentBuffer.length(),nextState));
	yybegin(nextState);
	return(t);
 }
            case 983: break;
            default:
            return null;
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
