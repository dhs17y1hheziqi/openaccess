
/*
 * Copyright (c) 1998 - 2005 Versant Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Versant Corporation - initial API and implementation
 */
/* The following code was generated by JFlex 1.3.5 on 5/12/04 12:42 PM */

package com.versant.core.jdo.tools.workbench.jdoql.lexer;

import java.io.*;

import com.versant.core.jdo.tools.workbench.model.MdClass;
import com.versant.core.jdo.tools.workbench.model.MdField;
import com.versant.core.jdo.tools.workbench.jdoql.insight.*;
import com.versant.core.metadata.MDStatics;

import java.util.*;

import za.co.hemtech.gui.model.ObservableList;

/**
 *          <p/>
 *          /**
 *          This class is a scanner generated by
 *          <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 *          on 5/12/04 12:42 PM from the specification file
 *          <tt>file:/home/carl/work/hemtech/jdo2/lib/../src/za/co/hemtech/jdo/tools/workbench/jdoql/lexer/JdoqlLexer.flex</tt>
 * @keep-all JdoqlLexer is a java lexer.  Created with JFlex.
 * The tokens returned should comply with the JDOQL Language Specification
 * @see JdoqlToken
 */
public class JdoqlLexer implements Lexer {

    /**
     * This character denotes the end of file
     */
    final public static int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    final private static int YY_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    final public static int YYINITIAL = 0;

    /**
     * Translates characters to character classes
     */
    final private static char[] yycmap = {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 0, 7, 9, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        7, 39, 18, 0, 6, 10, 41, 17, 32, 33, 20, 21, 36, 22, 31, 19,
        4, 5, 5, 5, 3, 3, 3, 3, 2, 2, 59, 58, 38, 43, 37, 59,
        0, 1, 1, 56, 30, 27, 28, 6, 6, 6, 6, 50, 24, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 54, 25, 6, 6, 34, 8, 35, 60, 6,
        0, 47, 14, 48, 29, 26, 15, 6, 44, 45, 6, 6, 23, 52, 13, 49,
        53, 57, 12, 46, 16, 11, 6, 55, 25, 51, 6, 58, 42, 58, 40, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    /**
     * Translates a state to a row index in the transition table
     */
    final private static int yy_rowMap [] = {
        0, 61, 122, 183, 244, 305, 366, 427, 488, 549,
        610, 671, 732, 793, 427, 854, 915, 976, 1037, 1098,
        1098, 1098, 1098, 1098, 1159, 1220, 1281, 1098, 1342, 1403,
        1464, 1525, 1586, 1647, 1098, 1098, 427, 1708, 1708, 1708,
        1769, 1708, 1830, 1891, 1952, 2013, 1708, 2074, 2135, 1708,
        2196, 2257, 1098, 2318, 2379, 2440, 2501, 2562, 2623, 2684,
        1098, 2745, 1098, 2806, 2867, 2928, 2989, 3050, 3111, 1098,
        3172, 1098, 1098, 1098, 1098, 1098, 3233, 3294, 3355, 3416,
        3477, 3538, 1708, 3599, 3660, 3721, 3782, 3843, 3904, 3965,
        4026, 4087, 4148, 4209, 1098, 4270, 4331, 4392, 4453, 4514,
        4575, 4636, 4697, 4758, 1098, 4819, 1098, 1098, 4880, 1098,
        4941, 1098, 5002, 5063, 122, 5124, 5185, 1708, 5246, 5307,
        122, 5368, 122, 122, 5429, 5490, 1098, 5551, 5612, 5673,
        5734, 1098, 5795, 1098, 5856, 5917, 5978, 6039, 122, 6100,
        6161, 6222, 6283, 1098, 6344, 6405, 6466, 6527, 6588, 6649,
        6710, 6771, 6832, 6893, 6954, 7015, 7076, 7137, 7198, 122,
        7259, 7320, 7381, 7442, 122, 7503, 7564, 7625, 7686, 7747,
        7808, 122, 7869, 122, 122
    };

    /**
     * The packed transition table of the DFA (part 0)
     */
    final private static String yy_packed0 =
            "\1\2\1\3\2\4\1\5\1\4\1\3\1\6\1\7" +
            "\1\6\1\10\2\3\1\11\1\3\1\12\1\13\1\14" +
            "\1\15\1\16\1\17\1\20\1\21\3\3\1\22\4\3" +
            "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
            "\1\33\1\34\1\35\1\36\1\37\1\3\1\40\1\41" +
            "\1\3\1\42\11\3\1\43\1\44\1\45\7\2\1\0" +
            "\1\2\2\0\6\2\6\0\10\2\15\0\16\2\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\10\3" +
            "\15\0\16\3\3\0\2\46\4\4\1\46\1\0\1\46" +
            "\2\0\4\46\1\47\1\46\6\0\2\50\1\46\2\51" +
            "\1\47\2\52\1\53\14\0\16\46\3\0\2\46\1\54" +
            "\1\55\1\56\1\55\1\46\1\0\1\46\2\0\4\46" +
            "\1\57\1\46\6\0\2\50\1\60\2\61\1\57\2\62" +
            "\1\63\14\0\16\46\12\0\1\6\1\0\1\6\63\0" +
            "\7\2\1\0\1\2\2\0\1\64\5\2\6\0\10\2" +
            "\15\0\16\2\56\0\1\65\21\0\1\2\6\3\1\0" +
            "\1\7\2\0\1\66\5\3\6\0\10\3\15\0\16\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\6\3\6\0" +
            "\10\3\15\0\3\3\1\67\12\3\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\1\3\1\70\4\3\6\0\10\3" +
            "\15\0\1\71\4\3\1\72\10\3\3\0\10\73\1\74" +
            "\1\0\7\73\1\75\53\73\10\15\1\76\1\0\10\15" +
            "\1\77\52\15\23\0\1\100\1\101\26\0\1\65\46\0" +
            "\1\65\25\0\1\65\47\0\1\65\24\0\1\65\21\0" +
            "\1\2\6\3\1\0\1\7\2\0\2\3\1\102\3\3" +
            "\6\0\10\3\15\0\16\3\5\0\2\103\1\104\1\103" +
            "\231\0\1\105\5\0\1\106\67\0\1\107\4\0\1\110" +
            "\74\0\1\111\72\0\1\112\1\0\1\65\73\0\1\113" +
            "\1\65\74\0\1\114\21\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\10\3\15\0\2\3\1\115\13\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\5\3\1\116" +
            "\6\0\10\3\15\0\15\3\1\117\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\6\3\6\0\10\3\15\0\5\3" +
            "\1\120\10\3\3\0\7\46\1\0\1\46\2\0\6\46" +
            "\6\0\11\46\14\0\16\46\3\0\2\46\4\121\1\46" +
            "\1\0\1\46\2\0\6\46\4\0\2\122\11\46\14\0" +
            "\16\46\3\0\2\46\4\53\1\46\1\0\1\46\2\0" +
            "\4\46\1\47\1\46\6\0\3\46\2\51\1\47\2\52" +
            "\1\46\14\0\16\46\3\0\2\46\4\54\1\46\1\0" +
            "\1\46\2\0\4\46\1\47\1\46\6\0\3\46\2\51" +
            "\1\47\2\52\1\53\14\0\16\46\3\0\2\46\1\54" +
            "\3\55\1\46\1\0\1\46\2\0\4\46\1\47\1\46" +
            "\6\0\2\123\1\46\2\51\1\47\2\52\1\53\14\0" +
            "\16\46\3\0\2\46\1\54\1\55\1\56\1\55\1\46" +
            "\1\0\1\46\2\0\4\46\1\57\1\46\6\0\2\123" +
            "\1\46\2\61\1\57\2\62\1\63\14\0\16\46\3\0" +
            "\1\46\5\124\1\46\1\0\1\46\2\0\3\46\2\124" +
            "\1\46\6\0\3\46\5\124\1\46\14\0\3\46\2\124" +
            "\7\46\1\124\1\46\3\0\2\46\4\125\1\46\1\0" +
            "\1\46\2\0\6\46\4\0\2\126\11\46\14\0\16\46" +
            "\3\0\2\46\2\53\1\63\1\53\1\46\1\0\1\46" +
            "\2\0\4\46\1\57\1\46\6\0\3\46\2\61\1\57" +
            "\2\62\1\46\14\0\16\46\3\0\1\2\5\127\1\2" +
            "\1\0\1\2\2\0\3\2\2\127\1\2\6\0\3\2" +
            "\5\127\15\0\3\2\2\127\7\2\1\127\1\2\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\1\130" +
            "\7\3\15\0\16\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\1\131\7\3\15\0\16\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\1\132\5\3\6\0" +
            "\10\3\15\0\16\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\10\3\15\0\1\3\1\133\14\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\6\3\6\0" +
            "\1\3\1\134\6\3\15\0\16\3\3\0\10\135\1\136" +
            "\1\0\7\135\1\137\56\135\1\140\2\141\2\135\1\73" +
            "\1\0\1\135\1\142\7\73\52\135\3\143\3\15\2\143" +
            "\1\15\1\0\1\143\1\144\6\15\1\145\52\143\11\100" +
            "\1\0\63\100\24\146\1\147\50\146\1\2\6\3\1\0" +
            "\1\7\2\0\6\3\6\0\6\3\1\150\1\3\15\0" +
            "\16\3\5\0\4\103\11\0\1\151\12\0\2\152\1\151" +
            "\2\153\40\0\2\103\1\104\1\103\11\0\1\154\12\0" +
            "\2\155\1\154\2\156\103\0\1\157\5\0\1\160\74\0" +
            "\1\160\21\0\1\2\6\3\1\0\1\7\2\0\6\3" +
            "\6\0\4\3\1\161\3\3\15\0\16\3\3\0\1\2" +
            "\6\3\1\0\1\7\2\0\6\3\6\0\10\3\15\0" +
            "\3\3\1\162\12\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\1\163\7\3\15\0\16\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\2\3\1\164\3\3" +
            "\6\0\10\3\15\0\16\3\3\0\2\46\4\121\1\46" +
            "\1\0\1\46\2\0\4\46\1\47\1\46\6\0\5\46" +
            "\1\47\2\52\1\46\14\0\16\46\5\0\4\165\67\0" +
            "\1\46\5\124\1\46\1\0\1\46\2\0\3\46\2\124" +
            "\1\46\6\0\2\166\1\46\5\124\1\46\14\0\3\46" +
            "\2\124\7\46\1\124\1\46\3\0\2\46\4\125\1\46" +
            "\1\0\1\46\2\0\4\46\1\57\1\46\6\0\5\46" +
            "\1\57\2\62\1\46\14\0\16\46\5\0\4\167\67\0" +
            "\1\2\5\170\1\2\1\0\1\2\2\0\3\2\2\170" +
            "\1\2\6\0\3\2\5\170\15\0\3\2\2\170\7\2" +
            "\1\170\1\2\3\0\1\2\6\3\1\0\1\7\2\0" +
            "\6\3\6\0\1\171\7\3\15\0\16\3\3\0\1\2" +
            "\6\3\1\0\1\7\2\0\6\3\6\0\10\3\15\0" +
            "\2\3\1\172\13\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\3\3\1\173\4\3\15\0\16\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\6\3\6\0" +
            "\10\3\15\0\2\3\1\174\13\3\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\6\3\6\0\10\3\15\0\5\3" +
            "\1\175\10\3\3\0\10\135\1\136\1\0\7\135\1\75" +
            "\64\135\1\0\66\135\3\73\2\135\1\136\1\0\7\135" +
            "\1\137\56\135\3\140\2\135\1\136\1\0\7\135\1\137" +
            "\54\135\5\176\2\135\1\136\1\0\4\135\2\176\1\135" +
            "\1\75\10\135\5\176\20\135\2\176\7\135\1\176\4\135" +
            "\11\143\1\0\10\143\1\177\53\143\5\200\3\143\1\0" +
            "\4\143\2\200\2\143\1\177\7\143\5\200\20\143\2\200" +
            "\7\143\1\200\4\143\10\145\1\201\1\0\10\145\1\77" +
            "\52\145\24\146\1\202\50\146\23\203\1\204\1\147\50\203" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\10\3" +
            "\15\0\2\3\1\205\13\3\5\0\4\165\17\0\2\122" +
            "\50\0\4\167\17\0\2\126\121\0\1\206\21\0\1\2" +
            "\6\3\1\0\1\7\2\0\6\3\6\0\10\3\15\0" +
            "\10\3\1\207\5\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\1\3\1\210\4\3\6\0\10\3\15\0\16\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\5\3\1\211" +
            "\6\0\10\3\15\0\16\3\5\0\4\165\11\0\1\151" +
            "\14\0\1\151\2\153\40\0\4\167\11\0\1\154\14\0" +
            "\1\154\2\156\36\0\1\2\5\212\1\2\1\0\1\2" +
            "\2\0\3\2\2\212\1\2\6\0\3\2\5\212\15\0" +
            "\3\2\2\212\7\2\1\212\1\2\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\6\3\6\0\3\3\1\213\4\3" +
            "\15\0\16\3\3\0\1\2\6\3\1\0\1\7\2\0" +
            "\6\3\6\0\10\3\15\0\13\3\1\214\2\3\3\0" +
            "\1\135\5\215\2\135\1\136\1\0\4\135\2\215\1\135" +
            "\1\75\10\135\5\215\20\135\2\215\7\135\1\215\4\135" +
            "\1\143\5\216\3\143\1\0\4\143\2\216\2\143\1\177" +
            "\7\143\5\216\20\143\2\216\7\143\1\216\4\143\3\0" +
            "\3\145\2\0\1\145\2\0\1\217\7\145\52\0\23\146" +
            "\1\220\1\202\50\146\24\203\1\147\50\203\1\2\6\3" +
            "\1\0\1\7\2\0\6\3\6\0\10\3\15\0\12\3" +
            "\1\221\3\3\3\0\1\2\6\3\1\0\1\7\2\0" +
            "\6\3\6\0\10\3\15\0\11\3\1\222\4\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\5\3\1\223\6\0" +
            "\10\3\15\0\16\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\10\3\15\0\3\3\1\224\12\3" +
            "\3\0\1\2\5\3\1\2\1\0\1\2\2\0\3\2" +
            "\2\3\1\2\6\0\3\2\5\3\15\0\3\2\2\3" +
            "\7\2\1\3\1\2\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\3\3\1\225\4\3\15\0\16\3" +
            "\3\0\1\135\5\226\2\135\1\136\1\0\4\135\2\226" +
            "\1\135\1\75\10\135\5\226\20\135\2\226\7\135\1\226" +
            "\4\135\1\143\5\227\3\143\1\0\4\143\2\227\2\143" +
            "\1\177\7\143\5\227\20\143\2\227\7\143\1\227\4\143" +
            "\1\0\5\230\10\0\2\230\12\0\5\230\20\0\2\230" +
            "\7\0\1\230\4\0\1\2\6\3\1\0\1\7\2\0" +
            "\6\3\6\0\10\3\15\0\1\3\1\231\14\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\5\3\1\232\6\0" +
            "\10\3\15\0\16\3\3\0\1\2\6\3\1\0\1\7" +
            "\2\0\6\3\6\0\10\3\15\0\2\3\1\233\13\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\6\3\6\0" +
            "\10\3\15\0\1\3\1\234\14\3\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\1\3\1\235\4\3\6\0\10\3" +
            "\15\0\16\3\3\0\1\135\5\73\2\135\1\136\1\0" +
            "\4\135\2\73\1\135\1\75\10\135\5\73\20\135\2\73" +
            "\7\135\1\73\4\135\1\143\5\15\3\143\1\0\4\143" +
            "\2\15\2\143\1\177\7\143\5\15\20\143\2\15\7\143" +
            "\1\15\4\143\1\0\5\236\10\0\2\236\12\0\5\236" +
            "\20\0\2\236\7\0\1\236\4\0\1\2\6\3\1\0" +
            "\1\7\2\0\5\3\1\237\6\0\10\3\15\0\16\3" +
            "\3\0\1\2\6\3\1\0\1\7\2\0\6\3\6\0" +
            "\10\3\15\0\7\3\1\240\6\3\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\6\3\6\0\10\3\15\0\12\3" +
            "\1\241\3\3\3\0\1\2\6\3\1\0\1\7\2\0" +
            "\2\3\1\242\3\3\6\0\10\3\15\0\16\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\10\3" +
            "\15\0\14\3\1\243\1\3\4\0\5\244\10\0\2\244" +
            "\12\0\5\244\20\0\2\244\7\0\1\244\4\0\1\2" +
            "\6\3\1\0\1\7\2\0\6\3\6\0\10\3\15\0" +
            "\1\245\15\3\3\0\1\2\6\3\1\0\1\7\2\0" +
            "\6\3\6\0\10\3\15\0\1\3\1\246\14\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\10\3" +
            "\15\0\2\3\1\247\13\3\3\0\1\2\6\3\1\0" +
            "\1\7\2\0\6\3\6\0\10\3\15\0\3\3\1\250" +
            "\12\3\4\0\5\145\10\0\2\145\12\0\5\145\20\0" +
            "\2\145\7\0\1\145\4\0\1\2\6\3\1\0\1\7" +
            "\2\0\5\3\1\251\6\0\10\3\15\0\16\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\10\3" +
            "\15\0\6\3\1\252\7\3\3\0\1\2\6\3\1\0" +
            "\1\7\2\0\6\3\6\0\10\3\15\0\2\3\1\253" +
            "\13\3\3\0\1\2\6\3\1\0\1\7\2\0\6\3" +
            "\6\0\10\3\15\0\1\254\15\3\3\0\1\2\6\3" +
            "\1\0\1\7\2\0\6\3\6\0\3\3\1\255\4\3" +
            "\15\0\16\3\3\0\1\2\6\3\1\0\1\7\2\0" +
            "\6\3\6\0\3\3\1\256\4\3\15\0\16\3\3\0" +
            "\1\2\6\3\1\0\1\7\2\0\6\3\6\0\10\3" +
            "\15\0\7\3\1\257\6\3\3\0";

    /**
     * The transition table of the DFA
     */
    final private static int yytrans [] = yy_unpack();

    /* error codes */
    final private static int YY_UNKNOWN_ERROR = 0;
    final private static int YY_ILLEGAL_STATE = 1;
    final private static int YY_NO_MATCH = 2;
    final private static int YY_PUSHBACK_2BIG = 3;

    /* error messages for the codes above */
    final private static String YY_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Internal error: unknown state",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private final static byte YY_ATTRIBUTE[] = {
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 9, 9, 9, 9, 9, 1, 1, 1, 9, 1, 1, 1, 1,
        1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 0, 9, 1, 9, 1,
        1, 1, 1, 1, 1, 9, 1, 9, 9, 9, 9, 9, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 9, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 9, 0, 9, 9, 0, 9, 1, 9,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1,
        0, 1, 1, 9, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 0, 9,
        1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
        1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

    /**
     * the input device
     */
    private java.io.Reader yy_reader;

    /**
     * the current state of the DFA
     */
    private int yy_state;

    /**
     * the current lexical state
     */
    private int yy_lexical_state = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char yy_buffer[] = new char[YY_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int yy_markedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int yy_pushbackPos;

    /**
     * the current text position in the buffer
     */
    private int yy_currentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int yy_startRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int yy_endRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * yy_atBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean yy_atBOL = true;

    /**
     * yy_atEOF == true <=> the scanner is at the EOF
     */
    private boolean yy_atEOF;

    /* user code: */
    private StringBuffer commentText = new StringBuffer();
    private int commentStart;
    private int commentLineStart;
    private JdoqlToken lastToken;
    private String lastTokenImage;
    private boolean inComment = false;
    private MdClass mdClass;
    private MdClass currentMdClass;
    private HashMap mapVars = new HashMap();
    private HashMap mapParams = new HashMap();
    private HashMap classNames = new HashMap();
    private boolean thisFlag = false;
    private int bracketCount = 0;
    private int castCount = 0;
    private String castName;

    /**
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)
            throws IOException {
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))) {
            t = getNextToken();
        }
        return (t);
    }

    //
    private int getType(MdField field) {
        Class clazz = field.getField().getType();

        if (clazz.isArray()) {
            return JdoqlToken.TYPE_ARRAY;
        } else if (clazz.isPrimitive()) {
            if (clazz.getName().equals("boolean")) {
                return JdoqlToken.TYPE_BOOLEAN;
            } else {
                return JdoqlToken.TYPE_NUMBER;
            }
        } else {
            if (field.getCategory() == MDStatics.CATEGORY_REF) {
                return JdoqlToken.TYPE_PC;
            } else if (field.getCategory() == MDStatics.CATEGORY_COLLECTION) {
                return JdoqlToken.TYPE_COLLECTION;
            } else if (field.getCategory() == MDStatics.CATEGORY_MAP) {
                return JdoqlToken.TYPE_MAP;
            } else if (clazz.equals(String.class)) {
                return JdoqlToken.TYPE_STRING;
            } else {
                if (clazz.equals(Boolean.class)) {
                    return JdoqlToken.TYPE_BOOLEAN;
                } else if (clazz.equals(Byte.class) ||
                        clazz.equals(Integer.class) ||
                        clazz.equals(Short.class) ||
                        clazz.equals(Character.class) ||
                        clazz.equals(Double.class) ||
                        clazz.equals(Float.class) ||
                        clazz.equals(Long.class) ||
                        clazz.equals(java.util.Date.class) ||
                        clazz.equals(java.math.BigDecimal.class) ||
                        clazz.equals(java.math.BigInteger.class)) {
                    return JdoqlToken.TYPE_NUMBER;

                } else {
                    return JdoqlToken.TYPE_OBJECT;
                }
            }
        }
    }

    private int getVarType(String field) {
        String type = (String)mapVars.get(field);
        if (type == null) {
            return JdoqlToken.TYPE_OBJECT;
        }
        if (type.endsWith("[]")) {
            return JdoqlToken.TYPE_ARRAY;
        } else if (type.equals("String")) {
            return JdoqlToken.TYPE_STRING;
        } else if (type.equals("int") ||
                type.equals("byte") ||
                type.equals("short") ||
                type.equals("char") ||
                type.equals("float") ||
                type.equals("double") ||
                type.equals("long") ||
                type.equals("Byte") ||
                type.equals("Integer") ||
                type.equals("Short") ||
                type.equals("Character") ||
                type.equals("Double") ||
                type.equals("Float") ||
                type.equals("Long") ||
                type.equals("Date") ||
                type.equals("BigDecimal") ||
                type.equals("BigInteger")) {
            return JdoqlToken.TYPE_NUMBER;
        } else if (type.equals("boolean") ||
                type.equals("Boolean")) {
            return JdoqlToken.TYPE_BOOLEAN;
        } else if (type.equals("Collection") ||
                type.equals("Set") ||
                type.equals("List") ||
                type.equals("SortedSet") ||
                type.equals("HashSet") ||
                type.equals("TreeSet") ||
                type.equals("ArrayList") ||
                type.equals("LinkedList") ||
                type.equals("Vector")) {
            return JdoqlToken.TYPE_COLLECTION;
        } else if (type.equals("Map") ||
                type.equals("HashMap") ||
                type.equals("TreeMap") ||
                type.equals("Hashtable") ||
                type.equals("SortedMap")) {
            return JdoqlToken.TYPE_MAP;
        } else {
            return JdoqlToken.TYPE_OBJECT;
        }

    }

    private int getParamType(String field) {
        String type = (String)mapParams.get(field);
        if (type == null) {
            return JdoqlToken.TYPE_OBJECT;
        }
        if (type.endsWith("[]")) {
            return JdoqlToken.TYPE_ARRAY;
        } else if (type.equals("String")) {
            return JdoqlToken.TYPE_STRING;
        } else if (type.equals("int") ||
                type.equals("byte") ||
                type.equals("short") ||
                type.equals("char") ||
                type.equals("float") ||
                type.equals("double") ||
                type.equals("long") ||
                type.equals("Byte") ||
                type.equals("Integer") ||
                type.equals("Short") ||
                type.equals("Character") ||
                type.equals("Double") ||
                type.equals("Float") ||
                type.equals("Long") ||
                type.equals("Date") ||
                type.equals("BigDecimal") ||
                type.equals("BigInteger")) {
            return JdoqlToken.TYPE_NUMBER;
        } else if (type.equals("boolean") ||
                type.equals("Boolean")) {
            return JdoqlToken.TYPE_BOOLEAN;
        } else if (type.equals("Collection") ||
                type.equals("Set") ||
                type.equals("List") ||
                type.equals("SortedSet") ||
                type.equals("HashSet") ||
                type.equals("TreeSet") ||
                type.equals("ArrayList") ||
                type.equals("LinkedList") ||
                type.equals("Vector")) {
            return JdoqlToken.TYPE_COLLECTION;
        } else if (type.equals("Map") ||
                type.equals("HashMap") ||
                type.equals("TreeMap") ||
                type.equals("Hashtable") ||
                type.equals("SortedMap")) {
            return JdoqlToken.TYPE_MAP;
        } else {
            return JdoqlToken.TYPE_OBJECT;
        }

    }

    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0) {
                File f = new File(args[0]);
                if (f.exists()) {
                    if (f.canRead()) {
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            JdoqlLexer shredder = new JdoqlLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != JdoqlToken.WHITE_SPACE) {
                    System.out.println(t);
                }
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
     * All internal variables are reset, the old input stream  cannot be reused
     * (content of the internal buffer is discarded and lost).
     * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader   The new input.
     * @param yyline   The line number of the first token.
     * @param yychar   The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar,
                      int yycolumn) throws IOException {
        yyreset(reader);
        this.yyline = yyline;
        this.yychar = yychar;
        this.yycolumn = yycolumn;
        currentMdClass = mdClass;
        thisFlag = false;

    }

    public JdoqlLexer() {}

    public JdoqlLexer(String s) {
        this(new StringReader(s));
    }

    public MdClass getMdClass() {
        return mdClass;
    }

    public MdClass getCurrentMdClass() {
        if (currentMdClass == null) {
            return mdClass;
        }
        return currentMdClass;
    }

    public void setMdClass(MdClass mdClass) {
        this.mdClass = mdClass;
        this.currentMdClass = mdClass;
        if (mdClass != null) {
            List list = mdClass.getMdProject().getAllClasses();
            for (Iterator iter = list.iterator(); iter.hasNext();) {
                MdClass clazz = (MdClass)iter.next();
                classNames.put(clazz.getName(), clazz);
            }
        }
    }

    public void setReader(java.io.Reader in) {
        this.yy_reader = in;
    }

    public void setVars(HashMap map) {
        this.mapVars = map;
    }

    public void setParams(HashMap map) {
        this.mapParams = map;
    }

    private boolean isNow(JdoqlToken t, int currentPosition) {
        if (((t.getCharBegin()) <= currentPosition
                && (t.getCharEnd()) >= currentPosition)) {
            return true;
        } else {
            return false;
        }
    }

    public BodyDataWrapper getClassData(MdClass mdClassCurrent) {
        FieldDisplay.BIGGEST_LENGHT = 0;
        HashSet dataSet = new HashSet();

        if (mdClassCurrent == null) return null;
        List list = mdClassCurrent.getFieldList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            MdField f = (MdField)iter.next();
            if (f.getField() != null && f.getPersistenceModifierInt() == MDStatics.PERSISTENCE_MODIFIER_PERSISTENT) {
                DisplayField disp = new DisplayField(f.getField().getName(),
                        getShortName(f.getField().getType().getName()), null);
                disp.setLenght();
                dataSet.add(disp);
            }
        }

        if (mdClassCurrent.equals(mdClass) && !thisFlag) {
            Iterator iter = mapVars.keySet().iterator();
            while (iter.hasNext()) {
                String name = (String)iter.next();
                Object o = mapVars.get(name);
                if (o instanceof MdClass) {
                    DisplayVariable var = new DisplayVariable(name,
                            ((MdClass)o).getName(), null);
                    var.setLenght();
                    dataSet.add(var);
                } else {
                    DisplayVariable var = new DisplayVariable(name, (String)o,
                            null);
                    var.setLenght();
                    dataSet.add(var);
                }
            }
            iter = mapParams.keySet().iterator();
            while (iter.hasNext()) {
                String name = (String)iter.next();
                Object o = mapParams.get(name);
                if (o instanceof MdClass) {
                    DisplayParam param = new DisplayParam(name,
                            ((MdClass)o).getName(), null);
                    param.setLenght();
                    dataSet.add(param);
                } else {
                    DisplayParam param = new DisplayParam(name, (String)o,
                            null);
                    param.setLenght();
                    dataSet.add(param);
                }
            }
        }

        HashSet setToFill = new HashSet();
        fillInheritedFields(mdClassCurrent, setToFill);
        dataSet.addAll(setToFill);


        // and .sql
        ArrayList returnList = new ArrayList(dataSet);

        DisplayMethod dispSql = new DisplayMethod("sql()", "void",
                "String exp");
        dispSql.setLenght();
        returnList.add(dispSql);

        Collections.sort(returnList);
        return new BodyDataWrapper(getShortName(mdClassCurrent.getName()),
                returnList.toArray());
    }

    private String getShortName(String longName) {
        if (longName.lastIndexOf('.') > 0) {
            return longName.substring(longName.lastIndexOf('.') + 1,
                    longName.length());
        } else {
            return longName;
        }
    }

    private void fillInheritedFields(MdClass mdClassCurrent,
            HashSet listToFill) {
        String superClassString = mdClassCurrent.getPcSuperclassStr();
        if (superClassString == null) return;
        MdClass mdClass = mdClassCurrent.getMdPackage().findClass(
                superClassString);
        if (mdClass == null) return;
        List list = mdClass.getFieldList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            MdField f = (MdField)iter.next();
            if (f.getField() != null && f.getPersistenceModifierInt() == MDStatics.PERSISTENCE_MODIFIER_PERSISTENT) {
                DisplayInheritedField disp = new DisplayInheritedField(
                        f.getField().getName(),
                        getShortName(f.getField().getType().getName()), null);
                disp.setLenght();
                listToFill.add(disp);
            }
        }
        fillInheritedFields(mdClass, listToFill);
    }

    public class BodyDataWrapper {

        public Object[] data;
        public String className;

        public BodyDataWrapper(String className, Object[] data) {
            this.className = className;
            this.data = data;
        }
    }

    private MdField findField(MdClass mdClass, String fieldName) {
        if (mdClass == null) return null;
        MdField field = mdClass.findField(fieldName);
        if (field == null) {
            String superClassString = mdClass.getPcSuperclassStr();
            if (superClassString == null) {
                return null;
            } else {
                MdClass mdClassCurrent = mdClass.getMdPackage().findClass(
                        superClassString);
                if (mdClass == null) return null;
                MdField newfield = mdClassCurrent.findField(fieldName);
                if (newfield != null && newfield.getPersistenceModifierInt() == MDStatics.PERSISTENCE_MODIFIER_PERSISTENT) {
                    return newfield;
                } else {
                    return findField(mdClassCurrent, fieldName);
                }
            }

        } else {
            return field;
        }

    }

    /**
     * Before this gets called we must first reset the reader.
     *
     * @param currentPosition position of our Caret
     * @return
     */
    public BodyDataWrapper getBodyDataWrapper(int currentPosition) {
        JdoqlToken t = null;
        try {
            while ((t = (JdoqlToken)getNextToken(true, false)) != null) {

                if (isNow(t, currentPosition)) {     // we have to return something

                    if (t.isIdentifier()) {
                        if (t.getID() == JdoqlToken.IDENTIFIER) {
                            return getClassData(getCurrentMdClass());
                        } else if (t.getID() == JdoqlToken.IDENTIFIER_COLLECTION) {
                            MdField field = findField(getCurrentMdClass(),
                                    lastTokenImage);
                            Object[] obs = null;
                            if (field != null) {
                                obs = getCollection(field.getElementType().getText());
                            } else {
                                obs = getCollection(null);
                            }
                            return new BodyDataWrapper("Collection", obs);
                        } else if (t.getID() == JdoqlToken.IDENTIFIER_MAP) {
                            MdField field = findField(getCurrentMdClass(),
                                    lastTokenImage);
                            Object[] obs = null;
                            if (field != null) {
                                obs = getMap(field.getElementType().getText(),
                                        field.getKeyType().getText());
                            } else {
                                obs = getMap(null, null);
                            }
                            return new BodyDataWrapper("Map", obs);
                        } else if (t.getID() == JdoqlToken.IDENTIFIER_STRING) {
                            return new BodyDataWrapper("String",
                                    getAllString());
                        } else {
                            return null;
                        }

                    } else if (t.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                        if (t.specialID == JdoqlToken.SPECIAL_ID_IDENTIFIER) {
                            return getClassData(getCurrentMdClass());
                        } else if (t.specialID == JdoqlToken.SPECIAL_ID_SQL) {
                            return new BodyDataWrapper("SQL Expression",
                                    getSQL());   // todo
                        } else if (t.specialID == JdoqlToken.SPECIAL_ID_COLLECTION) {
                            MdField field = findField(getCurrentMdClass(),
                                    lastTokenImage);
                            Object[] obs = null;
                            if (field != null) {
                                obs = getCollection(field.getElementType().getText());
                            } else {
                                obs = getCollection(null);
                            }
                            return new BodyDataWrapper("Collection", obs);
                        } else if (t.specialID == JdoqlToken.SPECIAL_ID_MAP) {
                            MdField field = findField(getCurrentMdClass(),
                                    lastTokenImage);
                            Object[] obs = null;
                            if (field != null) {
                                obs = getMap(field.getElementType().getText(),
                                        field.getKeyType().getText());
                            } else {
                                obs = getMap(null,null);
                            }
                            return new BodyDataWrapper("Map", obs);
                        } else if (t.specialID == JdoqlToken.SPECIAL_ID_STRING) {
                            return new BodyDataWrapper("String",
                                    getAllString());
                        } else if (t.specialID == JdoqlToken.SPECIAL_ID_STRING_LOWER) {
                            return new BodyDataWrapper("String", getString());
                        } else if (t.specialID == JdoqlToken.SPECIAL_ID_THIS) {
                            return getClassData(getCurrentMdClass());
                        } else {
                            return null;
                        }
                    } else if (t.isError()) {
                        JdoqlToken prev = t.getPrevToken();
                        if (t.getID() == JdoqlToken.ERROR_INVALID_SEPERATOR) {
                            return null;
                        }

                        if (prev != null) {

                            if (prev.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                if (prev.specialID == JdoqlToken.SPECIAL_ID_IDENTIFIER) {
                                    return getClassData(getCurrentMdClass());
                                } else if (prev.specialID == JdoqlToken.SPECIAL_ID_SQL) {
                                    return new BodyDataWrapper(
                                            "SQL Expression", getSQL());   // todo
                                } else if (prev.specialID == JdoqlToken.SPECIAL_ID_COLLECTION) {
                                    MdField field = findField(
                                            getCurrentMdClass(),
                                            lastTokenImage);
                                    Object[] obs = null;
                                    if (field != null) {
                                        obs = getCollection(field.getElementType().getText());
                                    } else {
                                        obs = getCollection(null);
                                    }
                                    return new BodyDataWrapper("Collection", obs);
                                } else if (prev.specialID == JdoqlToken.SPECIAL_ID_MAP) {
                                    MdField field = findField(
                                            getCurrentMdClass(),
                                            lastTokenImage);
                                    Object[] obs = null;
                                    if (field != null) {
                                        obs = getMap(field.getElementType().getText(),
                                                field.getKeyType().getText());
                                    } else {
                                        obs = getMap(null, null);
                                    }
                                    return new BodyDataWrapper("Map", obs);
                                } else if (prev.specialID == JdoqlToken.SPECIAL_ID_STRING) {
                                    return new BodyDataWrapper("String",
                                            getAllString());
                                } else if (prev.specialID == JdoqlToken.SPECIAL_ID_STRING_LOWER) {
                                    return new BodyDataWrapper("String",
                                            getString());
                                } else {
                                    return null;
                                }
                            } else if (prev.isComment()) {
                                return getClassData(getCurrentMdClass());
                            } else if (prev.isSeparator()) {
                                return getClassData(getCurrentMdClass());
                            } else if (prev.isOperator()) {
                                return getClassData(getCurrentMdClass());
                            } else if (t.getID() == 3907) {
                                return getClassData(getCurrentMdClass());
                            } else {
                                return null;
                            }
                        } else {
                            return getClassData(getCurrentMdClass());
                        }
                    } else if (t.isSeparator()) {
                        return getClassData(getCurrentMdClass());
                    } else {
                        if (t.getID() == 1024) {
                            return getClassData(getCurrentMdClass());
                        } else {
                            return null;
                        }
                    }

                }
            }
            return getClassData(getCurrentMdClass());
        } catch (IOException e) {
            return getClassData(getCurrentMdClass());
        }
    }

    private Object[] getCollection(String containsType) {
        FieldDisplay.BIGGEST_LENGHT = 0;
        Object[] col = new Object[3];

        DisplayMethod con = null;
        if (containsType != null) {
            con = new DisplayMethod("contains()", "boolean",
                containsType + " elem");
        } else {
            con = new DisplayMethod("contains()", "boolean", null);
        }
        con.setLenght();
        col[0] = con;
        DisplayMethod is = new DisplayMethod("isEmpty()", "boolean", null);
        is.setLenght();
        col[1] = is;
        DisplayMethod sql = new DisplayMethod("sql()", "void", "String exp");
        sql.setLenght();
        col[2] = sql;
        return col;
    }

    private Object[] getMap(String containsType, String containsKey) {
        FieldDisplay.BIGGEST_LENGHT = 0;
        Object[] col = new Object[4];
        DisplayMethod con = null;
        if (containsType != null) {
            con = new DisplayMethod("contains()", "boolean",
                    containsType + " value");
        } else {
            con = new DisplayMethod("contains()", "boolean", null);
        }
        con.setLenght();
        col[0] = con;


        DisplayMethod key = null;
        if (containsKey != null) {
            key = new DisplayMethod("containsKey()", "boolean",
                    containsKey + " key");
        } else {
            key = new DisplayMethod("containsKey()", "boolean", null);
        }

        key.setLenght();
        col[1] = key;
        DisplayMethod is = new DisplayMethod("isEmpty()", "boolean", null);
        is.setLenght();
        col[2] = is;
        DisplayMethod sql = new DisplayMethod("sql()", "void", "String exp");
        sql.setLenght();
        col[3] = sql;

        return col;
    }

    private Object[] getAllString() {
        FieldDisplay.BIGGEST_LENGHT = 0;
        Object[] string = new Object[4];
        DisplayMethod end = new DisplayMethod("endsWith()", "boolean",
                "String suffix");
        end.setLenght();
        string[0] = end;
        DisplayMethod start = new DisplayMethod("startsWith()", "boolean",
                "String prefix");
        start.setLenght();
        string[1] = start;
        DisplayMethod lower = new DisplayMethod("toLowerCase()", "String",
                null);
        lower.setLenght();
        string[2] = lower;
        DisplayMethod sql = new DisplayMethod("sql()", "void", "String exp");
        sql.setLenght();
        string[3] = sql;

        return string;
    }

    private Object[] getSQL() {
        FieldDisplay.BIGGEST_LENGHT = 0;
        Object[] string = new Object[1];
        DisplayMethod sql = new DisplayMethod("sql()", "void", "String exp");
        sql.setLenght();
        string[0] = sql;

        return string;
    }

    private Object[] getString() {
        FieldDisplay.BIGGEST_LENGHT = 0;
        Object[] string = new Object[3];
        DisplayMethod end = new DisplayMethod("endsWith()", "boolean",
                "String suffix");
        end.setLenght();
        string[0] = end;
        DisplayMethod start = new DisplayMethod("startsWith()", "boolean",
                "String prefix");
        start.setLenght();
        string[1] = start;
        DisplayMethod sql = new DisplayMethod("sql()", "void", "String exp");
        sql.setLenght();
        string[2] = sql;

        return string;
    }

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public JdoqlLexer(java.io.Reader in) {
        this.yy_reader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public JdoqlLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the split, compressed DFA transition table.
     *
     * @return the unpacked transition table
     */
    private static int[] yy_unpack() {
        int[] trans = new int[7930];
        int offset = 0;
        offset = yy_unpack(yy_packed0, offset, trans);
        return trans;
    }

    /**
     * Unpacks the compressed DFA transition table.
     *
     * @param packed the packed transition table
     * @return the index of the last entry
     */
    private static int yy_unpack(String packed, int offset, int[] trans) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do trans[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws IOException if any I/O-Error occurs
     */
    private boolean yy_refill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (yy_startRead > 0) {
            System.arraycopy(yy_buffer, yy_startRead,
                    yy_buffer, 0,
                    yy_endRead - yy_startRead);

            /* translate stored positions */
            yy_endRead -= yy_startRead;
            yy_currentPos -= yy_startRead;
            yy_markedPos -= yy_startRead;
            yy_pushbackPos -= yy_startRead;
            yy_startRead = 0;
        }

        /* is the buffer big enough? */
        if (yy_currentPos >= yy_buffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[yy_currentPos * 2];
            System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
            yy_buffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = yy_reader.read(yy_buffer, yy_endRead,
                yy_buffer.length - yy_endRead);

        if (numRead < 0) {
            return true;
        } else {
            yy_endRead += numRead;
            return false;
        }
    }

    /**
     * Closes the input stream.
     */
    final public void yyclose() throws java.io.IOException {
        yy_atEOF = true;            /* indicate end of file */
        yy_endRead = yy_startRead;  /* invalidate buffer    */

        if (yy_reader != null) {
            yy_reader.close();
        }
    }

    /**
     * Closes the current stream, and resets the
     * scanner to read from a new input stream.
     * <p/>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    final public void yyreset(java.io.Reader reader)
            throws java.io.IOException {
        yyclose();
        yy_reader = reader;
        yy_atBOL = true;
        yy_atEOF = false;
        yy_endRead = yy_startRead = 0;
        yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
        yyline = yychar = yycolumn = 0;
        yy_lexical_state = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    final public int yystate() {
        return yy_lexical_state;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    final public void yybegin(int newState) {
        yy_lexical_state = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    final public String yytext() {
        return new String(yy_buffer, yy_startRead, yy_markedPos - yy_startRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    final public char yycharat(int pos) {
        return yy_buffer[yy_startRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    final public int yylength() {
        return yy_markedPos - yy_startRead;
    }

    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void yy_ScanError(int errorCode) {
        String message;
        try {
            message = YY_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    private void yypushback(int number) {
        if (number > yylength()) {
            yy_ScanError(YY_PUSHBACK_2BIG);
        }

        yy_markedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws IOException if any I/O-Error occurs
     */
    public Token getNextToken() throws java.io.IOException {
        int yy_input;
        int yy_action;

        // cached fields:
        int yy_currentPos_l;
        int yy_startRead_l;
        int yy_markedPos_l;
        int yy_endRead_l = yy_endRead;
        char[] yy_buffer_l = yy_buffer;
        char[] yycmap_l = yycmap;

        int[] yytrans_l = yytrans;
        int[] yy_rowMap_l = yy_rowMap;
        byte[] yy_attr_l = YY_ATTRIBUTE;

        while (true) {
            yy_markedPos_l = yy_markedPos;

            yychar += yy_markedPos_l - yy_startRead;

            boolean yy_r = false;
            for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                 yy_currentPos_l++) {
                switch (yy_buffer_l[yy_currentPos_l]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yy_r = false;
                        break;
                    case '\r':
                        yyline++;
                        yy_r = true;
                        break;
                    case '\n':
                        if (yy_r) {
                            yy_r = false;
                        } else {
                            yyline++;
                        }
                        break;
                    default:
                        yy_r = false;
                }
            }

            if (yy_r) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean yy_peek;
                if (yy_markedPos_l < yy_endRead_l) {
                    yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
                } else if (yy_atEOF) {
                    yy_peek = false;
                } else {
                    boolean eof = yy_refill();
                    yy_markedPos_l = yy_markedPos;
                    yy_buffer_l = yy_buffer;
                    if (eof) {
                        yy_peek = false;
                    } else {
                        yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
                    }
                }
                if (yy_peek) yyline--;
            }
            yy_action = -1;

            yy_startRead_l = yy_currentPos_l = yy_currentPos =
                    yy_startRead = yy_markedPos_l;

            yy_state = yy_lexical_state;

            yy_forAction: {
                while (true) {

                    if (yy_currentPos_l < yy_endRead_l) {
                        yy_input = yy_buffer_l[yy_currentPos_l++];
                    } else if (yy_atEOF) {
                        yy_input = YYEOF;
                        break yy_forAction;
                    } else {
                        // store back cached positions
                        yy_currentPos = yy_currentPos_l;
                        yy_markedPos = yy_markedPos_l;
                        boolean eof = yy_refill();
                        // get translated positions and possibly new buffer
                        yy_currentPos_l = yy_currentPos;
                        yy_markedPos_l = yy_markedPos;
                        yy_buffer_l = yy_buffer;
                        yy_endRead_l = yy_endRead;
                        if (eof) {
                            yy_input = YYEOF;
                            break yy_forAction;
                        } else {
                            yy_input = yy_buffer_l[yy_currentPos_l++];
                        }
                    }
                    int yy_next = yytrans_l[yy_rowMap_l[yy_state] + yycmap_l[yy_input]];
                    if (yy_next == -1) break yy_forAction;
                    yy_state = yy_next;

                    int yy_attributes = yy_attr_l[yy_state];
                    if ((yy_attributes & 1) == 1) {
                        yy_action = yy_state;
                        yy_markedPos_l = yy_currentPos_l;
                        if ((yy_attributes & 8) == 8) break yy_forAction;
                    }

                }
            }

            // store back cached position
            yy_markedPos = yy_markedPos_l;

            switch (yy_action) {

                case 18:
                    {
                        // "."
                        if (lastToken != null) {

                            if (castCount == 0 && castName != null && lastToken.getID() == JdoqlToken.SEPARATOR_RPAREN) {
                                // now we have to do a cast
                                currentMdClass = (MdClass)classNames.get(
                                        castName);
                                castName = null;
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.SEPARATOR_PERIOD, yytext(),
                                        yyline, yychar, yychar + 1));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                t.specialID = JdoqlToken.SPECIAL_ID_IDENTIFIER;
                                lastToken = t;
                                return (t);
                            }

                            if (lastToken.getID() == JdoqlToken.IDENTIFIER) {
                                MdField field = findField(currentMdClass,
                                        lastTokenImage);
                                if (field != null) {
                                    if (field.getCategory() == MDStatics.CATEGORY_REF) {
                                        //PC
                                        currentMdClass = field.getRefClass();
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.SEPARATOR_PERIOD,
                                                yytext(), yyline, yychar,
                                                yychar + 1));
                                        t.setPrevToken(lastToken);
                                        t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                        t.specialID = JdoqlToken.SPECIAL_ID_IDENTIFIER;
                                        lastToken = t;
                                        return (t);
                                    } else if (field.getCategory() == MDStatics.CATEGORY_COLLECTION) {
                                        //Collection
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.SEPARATOR_PERIOD,
                                                yytext(), yyline, yychar,
                                                yychar + 1));
                                        t.specialID = JdoqlToken.SPECIAL_ID_COLLECTION;
                                        t.setPrevToken(lastToken);
                                        t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                        lastToken = t;
                                        return (t);

                                    } else if (field.getCategory() == MDStatics.CATEGORY_MAP) {
                                        //Map
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.SEPARATOR_PERIOD,
                                                yytext(), yyline, yychar,
                                                yychar + 1));
                                        t.specialID = JdoqlToken.SPECIAL_ID_MAP;
                                        t.setPrevToken(lastToken);
                                        t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                        lastToken = t;
                                        return (t);

                                    } else if (field.getField().getType().equals(
                                            String.class)) {
                                        //String
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.SEPARATOR_PERIOD,
                                                yytext(), yyline, yychar,
                                                yychar + 1));
                                        t.specialID = JdoqlToken.SPECIAL_ID_STRING;
                                        t.setPrevToken(lastToken);
                                        t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                        lastToken = t;
                                        return (t);

                                    } else {
                                        //primative or something
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.SEPARATOR_PERIOD,
                                                yytext(), yyline, yychar,
                                                yychar + 1));
                                        t.specialID = JdoqlToken.SPECIAL_ID_SQL;
                                        t.setPrevToken(lastToken);
                                        t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                        lastToken = t;
                                        return (t);
                                    }
                                } else {
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.SEPARATOR_PERIOD,
                                            yytext(), yyline, yychar, yychar + 1));
                                    t.setPrevToken(lastToken);
                                    t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                    lastToken = t;
                                    return (t);
                                }
                            } else if (lastToken.getID() == JdoqlToken.IDENTIFIER_PARAM) {
                                int type = getParamType(lastToken.getContents());
                                if (type == JdoqlToken.TYPE_COLLECTION) {
                                    //Collection
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.SEPARATOR_PERIOD,
                                            yytext(), yyline, yychar,
                                            yychar + 1));
                                    t.specialID = JdoqlToken.SPECIAL_ID_COLLECTION;
                                    t.setPrevToken(lastToken);
                                    t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                    lastToken = t;
                                    return (t);

                                } else if (type == JdoqlToken.TYPE_MAP) {
                                    //Map
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.SEPARATOR_PERIOD,
                                            yytext(), yyline, yychar,
                                            yychar + 1));
                                    t.specialID = JdoqlToken.SPECIAL_ID_MAP;
                                    t.setPrevToken(lastToken);
                                    t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                    lastToken = t;
                                    return (t);

                                } else if (type == JdoqlToken.TYPE_STRING) {
                                    //String
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.SEPARATOR_PERIOD,
                                            yytext(), yyline, yychar,
                                            yychar + 1));
                                    t.specialID = JdoqlToken.SPECIAL_ID_STRING;
                                    t.setPrevToken(lastToken);
                                    t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                    lastToken = t;
                                    return (t);

                                } else {
                                    //primative or something
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.SEPARATOR_PERIOD,
                                            yytext(), yyline, yychar,
                                            yychar + 1));
                                    t.specialID = JdoqlToken.SPECIAL_ID_SQL;
                                    t.setPrevToken(lastToken);
                                    t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                    lastToken = t;
                                    return (t);
                                }

                            } else if (lastToken.getID() == JdoqlToken.IDENTIFIER_VAR_PC) {
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.SEPARATOR_PERIOD, yytext(),
                                        yyline, yychar, yychar + 1));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                t.specialID = JdoqlToken.SPECIAL_ID_IDENTIFIER;
                                lastToken = t;
                                return (t);
                            } else if (lastToken.getID() == JdoqlToken.IDENTIFIER_VAR) {
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.ERROR_INVALID_SEPERATOR,
                                        yytext(), yyline, yychar, yychar + 1));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                lastToken = t;
                                return (t);
                            } else if (lastToken.getID() == JdoqlToken.IDENTIFIER_STRING) {
                                //String
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.SEPARATOR_PERIOD, yytext(),
                                        yyline, yychar, yychar + 1));
                                t.specialID = JdoqlToken.SPECIAL_ID_STRING;
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                lastToken = t;
                                return (t);
                            } else if (lastToken.getID() == JdoqlToken.RESERVED_WORD_THIS) {
                                currentMdClass = mdClass;
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.SEPARATOR_PERIOD, yytext(),
                                        yyline, yychar, yychar + 1));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                t.specialID = JdoqlToken.SPECIAL_ID_THIS;
                                lastToken = t;
                                return (t);
                            } else {
                                if (lastToken.getID() == JdoqlToken.SEPARATOR_RPAREN && lastToken.getPrevToken() != null) {
                                    JdoqlToken right = lastToken.getPrevToken();
                                    if (right.getID() == JdoqlToken.SEPARATOR_LPAREN && right.getPrevToken() != null) {
                                        JdoqlToken string = right.getPrevToken();
                                        if (string.getID() == JdoqlToken.IDENTIFIER_STRING && string.type == JdoqlToken.TYPE_STRING) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.SEPARATOR_PERIOD,
                                                    yytext(), yyline, yychar,
                                                    yychar + 1));
                                            t.specialID = JdoqlToken.SPECIAL_ID_STRING_LOWER;
                                            t.setPrevToken(lastToken);
                                            t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                            lastToken = t;
                                            return (t);
                                        }

                                    }
                                }
                                if (lastToken.getID() == JdoqlToken.SEPARATOR_RPAREN && lastToken.getPrevToken() != null) {
//                          JdoqlToken left = lastToken.getPrevToken();
//                          if (left.getID() == JdoqlToken.SEPARATOR_LPAREN && left.getPrevToken() != null) {
//                              // now we check if it is sql
//                              JdoqlToken sql = left.getPrevToken();
//                              if (sql.getContents().equals("sql")) {
//                                  JdoqlToken t = (new JdoqlToken(JdoqlToken.ERROR_INVALID_SEPERATOR, yytext(), yyline,
//                                          yychar, yychar + 1));
//                                  t.setPrevToken(lastToken);
//                                  lastToken = t;
//                                  return (t);
//
//                              }
//
//                          } else if (left.isLiteral() && left.getPrevToken() != null){ // now we can check if it is the left param
//                              JdoqlToken realLeft = left.getPrevToken();
//                              if (realLeft.getID() == JdoqlToken.SEPARATOR_LPAREN && realLeft.getPrevToken() != null) {
//                                  // now we check if it is sql
//                                  JdoqlToken sql = realLeft.getPrevToken();
//                                  if (sql.getContents().equals("sql")) {
//                                      JdoqlToken t = (new JdoqlToken(JdoqlToken.ERROR_INVALID_SEPERATOR, yytext(), yyline,
//                                              yychar, yychar + 1));
//                                      t.setPrevToken(lastToken);
//                                      lastToken = t;
//                                      return (t);
//
//                                  }
//                              }
//                          }

                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.SEPARATOR_PERIOD,
                                            yytext(), yyline, yychar,
                                            yychar + 1));
                                    t.specialID = JdoqlToken.SPECIAL_ID_SQL;
                                    t.setPrevToken(lastToken);
                                    t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                    lastToken = t;
                                    return (t);
                                }

                                // this must always be last, just before the else part

                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.SEPARATOR_PERIOD, yytext(),
                                        yyline, yychar, yychar + 1));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_DOT_SEPERATOR;
                                lastToken = t;
                                return (t);
                            }
                        } else {
                            JdoqlToken t = (new JdoqlToken(
                                    JdoqlToken.ERROR_INVALID_SEPERATOR,
                                    yytext(), yyline, yychar, yychar + 1));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            return (t);
                        }
                    }
                case 176:
                    break;
                case 138:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.RESERVED_WORD_BOOLEAN, yytext(),
                                yyline, yychar, yychar + 5));
                        t.type = JdoqlToken.TYPE_BOOLEAN;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 177:
                    break;
                case 122:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.RESERVED_WORD_BOOLEAN, yytext(),
                                yyline, yychar, yychar + 4));
                        t.type = JdoqlToken.TYPE_BOOLEAN;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 178:
                    break;
                case 22:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.SEPARATOR_RBRACKET, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.setPrevToken(lastToken);
                        currentMdClass = mdClass;
                        lastToken = t;
                        return (t);
                    }
                case 179:
                    break;
                case 21:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.SEPARATOR_LBRACKET, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.setPrevToken(lastToken);
                        currentMdClass = mdClass;
                        lastToken = t;
                        return (t);
                    }
                case 180:
                    break;
                case 20:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.SEPARATOR_RPAREN, yytext(), yyline,
                                yychar, yychar + 1));
                        castCount--;
                        bracketCount--;
                        thisFlag = false;
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_RIGHT_SEPERATOR;
                        currentMdClass = mdClass;
                        lastToken = t;
                        return (t);
                    }
                case 181:
                    break;
                case 13:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_DIVIDE, yytext(), yyline,
                                yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 182:
                    break;
                case 44:
                case 45:
                    {
                        /* An Octal number cannot be too big.  After removing
                         * initial zeros, It can have 11 digits, the first
                         * of which must be 3 or less.
                         */
                        JdoqlToken t = null;
                        int i;
                        int length = yytext().length();
                        for (i = 1; i < length - 11; i++) {
                            //check for initial zeros
                            if (yytext().charAt(i) != '0') {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_INTEGER_OCTAL_SIZE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_NUMBER;
                                lastToken = t;
                                return (t);
                            }
                        }
                        if (length - i > 11) {
                            t = (new JdoqlToken(
                                    JdoqlToken.ERROR_INTEGER_OCTAL_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            t.type = JdoqlToken.TYPE_NUMBER;
                            lastToken = t;
                            return (t);
                        } else if (length - i == 11) {
                            // if the rest of the number is as big as possible
                            // the first digit can only be 3 or less
                            if (yytext().charAt(i) != '0' &&
                                    yytext().charAt(i) != '1' &&
                                    yytext().charAt(i) != '2' &&
                                    yytext().charAt(i) != '3') {

                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_INTEGER_OCTAL_SIZE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                t.type = JdoqlToken.TYPE_NUMBER;
                                lastToken = t;
                                return (t);
                            }
                        }
                        // Otherwise, it should be OK
                        t = (new JdoqlToken(JdoqlToken.LITERAL_INTEGER_OCTAL,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 183:
                    break;
                case 7:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 1));
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 184:
                    break;
                case 71:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_LESS_THAN_OR_EQUAL,
                                yytext(), yyline, yychar, yychar + 2));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 185:
                    break;
                case 58:
                case 95:
                case 96:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_UNCLOSED_CHARACTER, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 186:
                    break;
                case 27:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_BITWISE_COMPLIMENT,
                                yytext(), yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 187:
                    break;
                case 46:
                case 107:
                    {
                        /* catch the case of a zero in parsing, so that we do not incorrectly
                         * give an error that a number was rounded to zero
                         */
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.LITERAL_FLOATING_POINT, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        t.type = JdoqlToken.TYPE_NUMBER;
                        return (t);
                    }
                case 188:
                    break;
                case 133:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 4));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 189:
                    break;
                case 111:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 3));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 190:
                    break;
                case 110:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 3));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 191:
                    break;
                case 70:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 2));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 192:
                    break;
                case 68:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 2));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 193:
                    break;
                case 30:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 1));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 194:
                    break;
                case 34:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_SEPERATOR, yytext(),
                                yyline, yychar, yychar + 1));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 195:
                    break;
                case 35:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 1));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 196:
                    break;
                case 36:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 1));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 197:
                    break;
                case 52:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_OPERATOR, yytext(),
                                yyline, yychar, yychar + 2));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 198:
                    break;
                case 174:
                    {
                        // "containsKey"
                        if (lastToken != null) {
                            if (lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                JdoqlToken prev = lastToken.getPrevToken();
                                if (prev != null) {
                                    MdField field = findField(currentMdClass,
                                            prev.getContents());
                                    if (field != null) {
                                        if (field.getCategory() == MDStatics.CATEGORY_MAP) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_MAP,
                                                    yytext(), yyline, yychar,
                                                    yychar + 11));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_OBJECT;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    }
                                    //
                                    if (mapParams.containsKey(prev.getContents())) {
                                        if (getParamType(prev.getContents()) == JdoqlToken.TYPE_MAP) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_MAP,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_OBJECT;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }

                                    }
                                }
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_IDENTIFIER, yytext(),
                                yyline, yychar, yychar + 11));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 199:
                    break;
                case 173:
                    {
                        // "toLowerCase"
                        if (lastToken != null) {
                            if (lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                JdoqlToken prev = lastToken.getPrevToken();
                                if (prev != null) {
                                    MdField field = findField(currentMdClass,
                                            prev.getContents());
                                    if (field != null) {
                                        if (field.getField().getType().equals(
                                                String.class)) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_STRING,
                                                    yytext(), yyline, yychar,
                                                    yychar + 11));
                                            t.type = JdoqlToken.TYPE_STRING;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    } else if (mapParams.containsKey(prev.getContents())) {
                                        if (getParamType(prev.getContents()) == JdoqlToken.TYPE_STRING) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_STRING,
                                                    yytext(), yyline, yychar,
                                                    yychar + 11));
                                            t.type = JdoqlToken.TYPE_STRING;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    }
                                }
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_IDENTIFIER, yytext(),
                                yyline, yychar, yychar + 11));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 200:
                    break;
                case 171:
                    {
                        // "startsWith"
                        if (lastToken != null) {
                            if (lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                JdoqlToken prev = lastToken.getPrevToken();
                                if (prev != null) {
                                    MdField field = findField(currentMdClass,
                                            prev.getContents());
                                    if (field != null) {
                                        if (field.getField().getType().equals(
                                                String.class)) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_STRING,
                                                    yytext(), yyline, yychar,
                                                    yychar + 10));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    } else if (mapParams.containsKey(prev.getContents())) {
                                        if (getParamType(prev.getContents()) == JdoqlToken.TYPE_STRING) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_STRING,
                                                    yytext(), yyline, yychar,
                                                    yychar + 10));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    } else if (prev.getID() == JdoqlToken.SEPARATOR_RPAREN && prev.getPrevToken() != null) {
                                        JdoqlToken right = prev.getPrevToken();
                                        if (right.getID() == JdoqlToken.SEPARATOR_LPAREN && right.getPrevToken() != null) {
                                            JdoqlToken string = right.getPrevToken();
                                            if (string.getID() == JdoqlToken.IDENTIFIER_STRING && string.type == JdoqlToken.TYPE_STRING) {
                                                JdoqlToken t = (new JdoqlToken(
                                                        JdoqlToken.IDENTIFIER_STRING,
                                                        yytext(), yyline,
                                                        yychar, yychar + 10));
                                                t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                                                t.setPrevToken(lastToken);
                                                lastToken = t;
                                                return (t);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_IDENTIFIER, yytext(),
                                yyline, yychar, yychar + 10));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 201:
                    break;
                case 166:
                    {
                        // "contains"
                        if (lastToken != null) {
                            if (lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                JdoqlToken prev = lastToken.getPrevToken();
                                if (prev != null) {
                                    MdField field = findField(currentMdClass,
                                            prev.getContents());
                                    if (field != null) {
                                        if (field.getCategory() == MDStatics.CATEGORY_COLLECTION) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_COLLECTION,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_OBJECT;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        } else if (field.getCategory() == MDStatics.CATEGORY_MAP) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_MAP,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_OBJECT;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    }

                                    if (mapParams.containsKey(prev.getContents())){
                                        int type = getParamType(prev.getContents());
                                        if (type == JdoqlToken.TYPE_COLLECTION) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_COLLECTION,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_OBJECT;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        } else if (type == JdoqlToken.TYPE_MAP) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_MAP,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_OBJECT;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }

                                    }
                                }
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_IDENTIFIER, yytext(),
                                yyline, yychar, yychar + 8));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 202:
                    break;
                case 164:
                    {
                        // "endsWith"
                        if (lastToken != null) {
                            if (lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                JdoqlToken prev = lastToken.getPrevToken();
                                if (prev != null) {
                                    MdField field = findField(currentMdClass,
                                            prev.getContents());
                                    if (field != null) {
                                        if (field.getField().getType().equals(
                                                String.class)) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_STRING,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }

                                    } else if (mapParams.containsKey(prev.getContents())) {
                                        if (getParamType(prev.getContents()) == JdoqlToken.TYPE_STRING) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_STRING,
                                                    yytext(), yyline, yychar,
                                                    yychar + 8));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    } else if (prev.getID() == JdoqlToken.SEPARATOR_RPAREN && prev.getPrevToken() != null) {
                                        JdoqlToken right = prev.getPrevToken();
                                        if (right.getID() == JdoqlToken.SEPARATOR_LPAREN && right.getPrevToken() != null) {
                                            JdoqlToken string = right.getPrevToken();
                                            if (string.getID() == JdoqlToken.IDENTIFIER_STRING && string.type == JdoqlToken.TYPE_STRING) {
                                                JdoqlToken t = (new JdoqlToken(
                                                        JdoqlToken.IDENTIFIER_STRING,
                                                        yytext(), yyline,
                                                        yychar, yychar + 8));
                                                t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                                                t.setPrevToken(lastToken);
                                                lastToken = t;
                                                return (t);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_IDENTIFIER, yytext(),
                                yyline, yychar, yychar + 8));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 203:
                    break;
                case 159:
                    {
                        // "isEmpty"
                        if (lastToken != null) {
                            if (lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                                JdoqlToken prev = lastToken.getPrevToken();
                                if (prev != null) {
                                    MdField field = findField(currentMdClass,
                                            prev.getContents());
                                    if (field != null) {
                                        if (field.getCategory() == MDStatics.CATEGORY_COLLECTION) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_COLLECTION,
                                                    yytext(), yyline, yychar,
                                                    yychar + 7));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_NONE;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        } else if (field.getCategory() == MDStatics.CATEGORY_MAP) {
                                            JdoqlToken t = (new JdoqlToken(
                                                    JdoqlToken.IDENTIFIER_MAP,
                                                    yytext(), yyline, yychar,
                                                    yychar + 7));
                                            t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_NONE;
                                            t.setPrevToken(lastToken);
                                            lastToken = t;
                                            return (t);
                                        }
                                    }
                                }

                                if (mapParams.containsKey(prev.getContents())) {
                                    int type = getParamType(prev.getContents());
                                    if (type == JdoqlToken.TYPE_COLLECTION) {
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.IDENTIFIER_COLLECTION,
                                                yytext(), yyline, yychar,
                                                yychar + 7));
                                        t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_NONE;
                                        t.setPrevToken(lastToken);
                                        lastToken = t;
                                        return (t);
                                    } else if (type == JdoqlToken.TYPE_MAP) {
                                        JdoqlToken t = (new JdoqlToken(
                                                JdoqlToken.IDENTIFIER_MAP,
                                                yytext(), yyline, yychar,
                                                yychar + 7));
                                        t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_NONE;
                                        t.setPrevToken(lastToken);
                                        lastToken = t;
                                        return (t);
                                    }

                                }
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_INVALID_IDENTIFIER, yytext(),
                                yyline, yychar, yychar + 7));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 204:
                    break;
                case 83:
                    {
                        /* A Hex number cannot be too big.  After removing
                         * initial zeros, It can have 8 digits
                         */
                        JdoqlToken t = null;
                        int i;
                        int length = yytext().length();
                        for (i = 2; i < length - 8; i++) {
                            //check for initial zeros
                            if (yytext().charAt(i) != '0') {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_INTEGER_HEXIDECIMAL_SIZE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            }
                        }
                        if (length - i > 8) {
                            t = (new JdoqlToken(
                                    JdoqlToken.ERROR_INTEGER_HEXIDECIMAL_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            t.type = JdoqlToken.TYPE_NUMBER;
                            return (t);
                        }
                        t = (new JdoqlToken(
                                JdoqlToken.LITERAL_INTEGER_HEXIDECIMAL,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        t.type = JdoqlToken.TYPE_NUMBER;
                        return (t);
                    }
                case 205:
                    break;
                case 75:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_EQUAL, yytext(), yyline,
                                yychar, yychar + 2));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_ALL_OPERATOR;
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 206:
                    break;
                case 69:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_GREATER_THAN_OR_EQUAL,
                                yytext(), yyline, yychar, yychar + 2));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 207:
                    break;
                case 64:
                case 101:
                case 102:
                case 129:
                case 130:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_UNCLOSED_COMMENT, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 208:
                    break;
                case 16:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_SUBTRACT, yytext(), yyline,
                                yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 209:
                    break;
                case 14:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_MULTIPLY, yytext(), yyline,
                                yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 210:
                    break;
                case 2:
                case 8:
                case 9:
                case 10:
                case 17:
                case 31:
                case 32:
                case 33:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 65:
                case 76:
                case 77:
                case 78:
                case 79:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 103:
                case 112:
                case 113:
                case 115:
                case 121:
                case 124:
                case 132:
                case 134:
                case 135:
                case 136:
                case 139:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 158:
                case 160:
                case 161:
                case 162:
                case 165:
                case 167:
                case 168:
                case 169:
                case 170:
                case 172:
                    {
                        // Identifier
                        if (castCount == 2 && lastToken != null &&
                                lastToken.getID() == JdoqlToken.SEPARATOR_LPAREN && classNames.containsKey(
                                        yytext())) {
                            castName = yytext();
                            lastTokenImage = yytext();
                            JdoqlToken t = (new JdoqlToken(
                                    JdoqlToken.IDENTIFIER_CAST, yytext(),
                                    yyline, yychar, yychar + yytext().length()));
                            t.type = JdoqlToken.TYPE_CAST;
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            return (t);
                        } else {
                            MdField field = findField(currentMdClass, yytext());
                            if (field != null) {
                                lastTokenImage = yytext();
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.IDENTIFIER, yytext(),
                                        yyline, yychar,
                                        yychar + yytext().length()));
                                t.type = getType(field);
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                return (t);
                            } else if (mapVars.containsKey(yytext()) && currentMdClass.equals(
                                    mdClass) && !thisFlag) { // we have a declared var
                                Object o = mapVars.get(yytext());
                                if (o instanceof MdClass) {
                                    currentMdClass = (MdClass)o;
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.IDENTIFIER_VAR_PC,
                                            yytext(), yyline, yychar,
                                            yychar + yytext().length()));
                                    t.type = JdoqlToken.TYPE_PC;
                                    t.setPrevToken(lastToken);
                                    lastToken = t;
                                    return (t);
                                } else {
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.IDENTIFIER_VAR,
                                            yytext(), yyline, yychar,
                                            yychar + yytext().length()));
                                    t.type = getVarType(yytext());
                                    t.setPrevToken(lastToken);
                                    lastToken = t;
                                    return (t);
                                }
                            } else if (mapParams.containsKey(yytext()) && currentMdClass.equals(
                                    mdClass) && !thisFlag) { // we have a declared var
                                Object o = mapParams.get(yytext());
                                if (o instanceof MdClass) {
                                    currentMdClass = (MdClass)o;
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.IDENTIFIER_PARAM_PC,
                                            yytext(), yyline, yychar,
                                            yychar + yytext().length()));
                                    t.type = JdoqlToken.TYPE_PC;
                                    t.setPrevToken(lastToken);
                                    lastToken = t;
                                    return (t);
                                } else {
                                    JdoqlToken t = (new JdoqlToken(
                                            JdoqlToken.IDENTIFIER_PARAM,
                                            yytext(), yyline, yychar,
                                            yychar + yytext().length()));
                                    t.type = getParamType(yytext());
                                    t.setPrevToken(lastToken);
                                    lastToken = t;
                                    return (t);
                                }
                            } else {
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.ERROR_INVALID_IDENTIFIER,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                return (t);
                            }
                        }
                    }
                case 211:
                    break;
                case 3:
                case 4:
                    {
                        /* At this point, the number we found could still be too large.
                         * If it is too large, we need to return an error.
                         * Java has methods built in that will decode from a string
                         * and throw an exception the number is too large
                         */
                        JdoqlToken t = null;
                        try {
                            /* bigger negatives are allowed than positives.  Thus
                             * we have to be careful to make sure a neg sign is preserved
                             */
                            if (lastToken != null) {
                                if (lastToken.getID() == JdoqlToken.OPERATOR_SUBTRACT) {
                                    Integer.decode('-' + yytext());
                                } else {
                                    Integer.decode(yytext());
                                }
                            } else {
                                Integer.decode(yytext());
                            }
                            t = (new JdoqlToken(
                                    JdoqlToken.LITERAL_INTEGER_DECIMAL,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                        } catch (NumberFormatException e) {
                            t = (new JdoqlToken(
                                    JdoqlToken.ERROR_INTEGER_DECIMIAL_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                        }
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 212:
                    break;
                case 12:
                case 100:
                    {
                        /* most of these errors have to be caught down near the end of the file.
                         * This way, previous expressions of the same length have precedence.
                         * This is really useful for catching anything bad by just allowing it
                         * to slip through the cracks.
                         */
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_UNCLOSED_STRING, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_STRING;
                        lastToken = t;
                        return (t);
                    }
                case 213:
                    break;
                case 38:
                case 104:
                    {
                        /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
                         * quite match the spec.  Its not far off, so we will deal.  If they fix
                         * then we are fixed.  So all good.
                         */
                        Float f;
                        JdoqlToken t = null;
                        try {
                            f = Float.valueOf(yytext());
                            if (f.isInfinite() || f.compareTo(new Float(0f)) == 0) {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_FLOAT_SIZE, yytext(),
                                        yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            } else {
                                t = (new JdoqlToken(
                                        JdoqlToken.LITERAL_FLOATING_POINT,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            }
                        } catch (NumberFormatException e) {
                            t = (new JdoqlToken(JdoqlToken.ERROR_FLOAT_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            t.type = JdoqlToken.TYPE_NUMBER;
                            return (t);
                        }
                    }
                case 214:
                    break;
                case 39:
                    {
                        JdoqlToken t = null;
                        try {
                            if (lastToken != null) {
                                if (lastToken.getID() == JdoqlToken.OPERATOR_SUBTRACT) {
                                    Long.decode(
                                            '-' + yytext().substring(0,
                                                    yytext().length() - 1));
                                } else {
                                    Long.decode(
                                            yytext().substring(0,
                                                    yytext().length() - 1));
                                }
                            } else {
                                Long.decode(
                                        yytext().substring(0,
                                                yytext().length() - 1));
                            }
                        } catch (NumberFormatException e) {
                            t = (new JdoqlToken(
                                    JdoqlToken.ERROR_LONG_DECIMIAL_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            t.type = JdoqlToken.TYPE_NUMBER;
                            return (t);
                        }
                        t = (new JdoqlToken(JdoqlToken.LITERAL_LONG_DECIMAL,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 215:
                    break;
                case 41:
                case 42:
                case 66:
                case 80:
                case 106:
                case 116:
                    {
                        Double d;
                        JdoqlToken t = null;
                        try {
                            d = Double.valueOf(yytext());
                            if (d.isInfinite() || d.compareTo(new Double(0d)) == 0) {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_DOUBLE_SIZE, yytext(),
                                        yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            } else {
                                t = (new JdoqlToken(JdoqlToken.LITERAL_DOUBLE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            }
                        } catch (NumberFormatException e) {

                            t = (new JdoqlToken(JdoqlToken.ERROR_DOUBLE_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            t.type = JdoqlToken.TYPE_NUMBER;
                            return (t);
                        }
                    }
                case 216:
                    break;
                case 143:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.COMMENT_TRADITIONAL, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 217:
                    break;
                case 131:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.COMMENT_DOCUMENTATION, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 218:
                    break;
                case 63:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.COMMENT_END_OF_LINE, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 219:
                    break;
                case 24:
                    {

                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_GREATER_THAN, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 220:
                    break;
                case 61:
                case 98:
                case 99:
                case 127:
                case 141:
                case 150:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_MALFORMED_UNCLOSED_STRING,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_STRING;
                        lastToken = t;
                        return (t);
                    }
                case 221:
                    break;
                case 62:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.LITERAL_STRING, yytext(), yyline,
                                yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_STRING;
                        lastToken = t;
                        return (t);
                    }
                case 222:
                    break;
                case 60:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.LITERAL_STRING, yytext(), yyline,
                                yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        t.type = JdoqlToken.TYPE_STRING;
                        return (t);
                    }
                case 223:
                    break;
                case 123:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.RESERVED_WORD_THIS, yytext(),
                                yyline, yychar, yychar + 4));
                        thisFlag = true;
                        t.type = JdoqlToken.TYPE_PC;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 224:
                    break;
                case 5:
                    {
                        JdoqlToken t = (new JdoqlToken(JdoqlToken.WHITE_SPACE,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 225:
                    break;
                case 15:
                    {
                        JdoqlToken t = (new JdoqlToken(JdoqlToken.OPERATOR_ADD,
                                yytext(), yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_STRING_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 226:
                    break;
                case 72:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_NOT_EQUAL, yytext(),
                                yyline, yychar, yychar + 2));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_ALL_OPERATOR;
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 227:
                    break;
                case 19:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.SEPARATOR_LPAREN, yytext(), yyline,
                                yychar, yychar + 1));
                        bracketCount++;
                        if (lastToken != null && lastToken.getID() == JdoqlToken.SEPARATOR_LPAREN) {
                            castCount = 2;
                        } else {
                            castCount++;
                        }
                        thisFlag = false;
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_LEFT_SEPERATOR;
                        currentMdClass = mdClass;
                        lastToken = t;
                        return (t);
                    }
                case 228:
                    break;
                case 117:
                    {
                        /* A Hex long cannot be too big.  After removing
                         * initial zeros, It can have 17 digits, the last of which is
                         * the L or l
                         */
                        JdoqlToken t = null;
                        int i;
                        int length = yytext().length();
                        for (i = 2; i < length - 17; i++) {
                            //check for initial zeros
                            if (yytext().charAt(i) != '0') {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_LONG_HEXIDECIMAL_SIZE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            }
                        }
                        if (length - i > 17) {
                            t = (new JdoqlToken(
                                    JdoqlToken.ERROR_LONG_HEXIDECIMAL_SIZE,
                                    yytext(), yyline, yychar,
                                    yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            t.type = JdoqlToken.TYPE_NUMBER;
                            return (t);
                        }
                        t = (new JdoqlToken(
                                JdoqlToken.LITERAL_LONG_HEXIDECIMAL, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        t.type = JdoqlToken.TYPE_NUMBER;
                        return (t);
                    }
                case 229:
                    break;
                case 94:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.LITERAL_CHARACTER, yytext(), yyline,
                                yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 230:
                    break;
                case 126:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_MALFORMED_STRING, yytext(),
                                yyline, yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_STRING;
                        lastToken = t;
                        return (t);
                    }
                case 231:
                    break;
                case 114:
                    {
                        // "sql"
                        if (lastToken != null && lastToken.getID() == JdoqlToken.SEPARATOR_PERIOD) {
                            JdoqlToken prev = lastToken.getPrevToken();
                            if (prev != null && prev.isLiteral()) {
                                JdoqlToken t = (new JdoqlToken(
                                        JdoqlToken.ERROR_INVALID_IDENTIFIER,
                                        yytext(), yyline, yychar, yychar + 3));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                return (t);
                            }
                        }
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.IDENTIFIER_STRING, yytext(), yyline,
                                yychar, yychar + 3));
                        t.type = JdoqlToken.TYPE_BOOLEAN_METHOD_STRING;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 232:
                    break;
                case 120:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.RESERVED_WORD_NULL, yytext(),
                                yyline, yychar, yychar + 4));
                        t.type = JdoqlToken.TYPE_OBJECT;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 233:
                    break;
                case 23:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.SEPARATOR_COMMA, yytext(), yyline,
                                yychar, yychar + 1));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 234:
                    break;
                case 37:
                case 40:
                case 43:
                case 47:
                case 48:
                    {
                        JdoqlToken t = (new JdoqlToken(JdoqlToken.ERROR_FLOAT,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 235:
                    break;
                case 49:
                case 50:
                case 67:
                case 84:
                case 109:
                case 118:
                    {

                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.LITERAL_DOUBLE, yytext(), yyline,
                                yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        t.type = JdoqlToken.TYPE_NUMBER;
                        return (t);
                    }
                case 236:
                    break;
                case 74:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_LOGICAL_OR, yytext(),
                                yyline, yychar, yychar + 2));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_BOOLEAN_OPERATOR;
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 237:
                    break;
                case 73:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_LOGICAL_AND, yytext(),
                                yyline, yychar, yychar + 2));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_BOOLEAN_OPERATOR;
                        currentMdClass = mdClass;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 238:
                    break;
                case 11:
                case 92:
                case 97:
                case 125:
                case 140:
                case 149:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_MALFORMED_UNCLOSED_CHARACTER,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        t.type = JdoqlToken.TYPE_NUMBER;
                        lastToken = t;
                        return (t);
                    }
                case 239:
                    break;
                case 25:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_LESS_THAN, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_NUMBER_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 240:
                    break;
                case 26:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_LOGICAL_NOT, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_BOOLEAN_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 241:
                    break;
                case 28:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_BITWISE_AND, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_BOOLEAN_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 242:
                    break;
                case 29:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.OPERATOR_BITWISE_OR, yytext(),
                                yyline, yychar, yychar + 1));
                        thisFlag = false;
                        t.type = JdoqlToken.TYPE_BOOLEAN_OPERATOR;
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        currentMdClass = mdClass;
                        return (t);
                    }
                case 243:
                    break;
                case 1:
                case 6:
                case 51:
                case 86:
                case 119:
                case 137:
                    {
                        JdoqlToken t = (new JdoqlToken(
                                JdoqlToken.ERROR_IDENTIFIER, yytext(), yyline,
                                yychar, yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        return (t);
                    }
                case 244:
                    break;
                case 82:
                    {
                        /* An Octal number cannot be too big.  After removing
                         * initial zeros, It can have 23 digits, the first
                         * of which must be 1 or less.  The last will be the L or l
                         * at the end.
                         */
                        JdoqlToken t = null;
                        int i;
                        int length = yytext().length();
                        for (i = 1; i < length - 23; i++) {
                            //check for initial zeros
                            if (yytext().charAt(i) != '0') {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_LONG_OCTAL_SIZE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            }
                        }
                        if (length - i > 23) {
                            t = (new JdoqlToken(
                                    JdoqlToken.ERROR_LONG_OCTAL_SIZE, yytext(),
                                    yyline, yychar, yychar + yytext().length()));
                            t.setPrevToken(lastToken);
                            lastToken = t;
                            t.type = JdoqlToken.TYPE_NUMBER;
                            return (t);
                        } else if (length - i == 23) {
                            // if the rest of the number is as big as possible
                            // the first digit can only be 3 or less
                            if (yytext().charAt(i) != '0' && yytext().charAt(i) != '1') {
                                t = (new JdoqlToken(
                                        JdoqlToken.ERROR_LONG_OCTAL_SIZE,
                                        yytext(), yyline, yychar,
                                        yychar + yytext().length()));
                                t.setPrevToken(lastToken);
                                lastToken = t;
                                t.type = JdoqlToken.TYPE_NUMBER;
                                return (t);
                            }
                        }
                        // Otherwise, it should be OK
                        t = (new JdoqlToken(JdoqlToken.LITERAL_LONG_OCTAL,
                                yytext(), yyline, yychar,
                                yychar + yytext().length()));
                        t.setPrevToken(lastToken);
                        lastToken = t;
                        t.type = JdoqlToken.TYPE_NUMBER;
                        return (t);
                    }
                case 245:
                    break;
                default:
                    if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
                        yy_atEOF = true;
                        return null;
                    } else {
                        yy_ScanError(YY_NO_MATCH);
                    }
            }
        }
    }

}
