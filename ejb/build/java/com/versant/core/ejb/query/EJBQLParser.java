
/*
 * Copyright (c) 1998 - 2005 Versant Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Versant Corporation - initial API and implementation
 */
/* Generated By:JavaCC: Do not edit this line. EJBQLParser.java */
package com.versant.core.ejb.query;

public class EJBQLParser implements EJBQLParserConstants {

    public static void main(String[] args) {
        try {
            EJBQLParser parser = new EJBQLParser(System.in);
            System.out.println("Type some input and Ctrl-D to parse :");
            Node q = parser.ejbqlQuery();
            System.out.println("\nparser.ejbqlQuery():\n" + q);
        } catch (Exception x) {
            x.printStackTrace(System.out);
            System.exit(1);
        }
    }

  final public Node ejbqlQuery() throws ParseException {
    Node q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      q = selectStatement();
      break;
    case UPDATE:
      q = updateStatement();
      break;
    case DELETE:
      q = deleteStatement();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public SelectNode selectStatement() throws ParseException {
    boolean distinct = false;
    Node selectList = null, fromList = null, orderBy = null, where = null;
    Node cur, prev;
    Node groupBy = null, having = null;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                            distinct = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    selectList = selectExpression();
                                      prev = selectList;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      cur = selectExpression();
                                         prev.setNext(cur); prev = cur;
    }
    fromList = fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      where = conditionalExpression();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      groupBy = groupByClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        jj_consume_token(HAVING);
        having = conditionalExpression();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      orderBy = orderByClause();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      {if (true) return new SelectNode(distinct, selectList, fromList, where,
        groupBy, having, orderBy);}
    throw new Error("Missing return statement in function");
  }

  final public DeleteNode deleteStatement() throws ParseException {
    Token schemaName, id = null;
    SetNode updateList, prev, cur;
    Node where = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    schemaName = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      id = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      where = conditionalExpression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
      {if (true) return new DeleteNode(schemaName.image, id == null ? null : id.image,
            where);}
    throw new Error("Missing return statement in function");
  }

  final public UpdateNode updateStatement() throws ParseException {
    Token schemaName, id = null;
    SetNode updateList, prev, cur;
    Node where = null;
    jj_consume_token(UPDATE);
    schemaName = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      id = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(SET);
    updateList = updateExpression();
                                            prev = updateList;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      cur = updateExpression();
                                         prev.setNext(cur); prev = cur;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      where = conditionalExpression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
      {if (true) return new UpdateNode(schemaName.image, id == null ? null : id.image,
            updateList, where);}
    throw new Error("Missing return statement in function");
  }

  final public SetNode updateExpression() throws ParseException {
    Token id = null, field;
    Node value;
    if (jj_2_1(2)) {
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
    } else {
      ;
    }
    field = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQ);
    value = expression();
      {if (true) return new SetNode(id == null ? null : id.image, field.image, value);}
    throw new Error("Missing return statement in function");
  }

  final public Node fromClause() throws ParseException {
    Node fromList = null, cur, prev;
    jj_consume_token(FROM);
    fromList = identificationVarDeclaration();
                                                prev = fromList;
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        cur = identificationVarDeclaration();
        break;
      case IN:
        cur = collectionMemberDeclaration();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            prev.setNext(cur); prev = cur;
    }
      {if (true) return fromList;}
    throw new Error("Missing return statement in function");
  }

  final public Node orderByClause() throws ParseException {
    Node list = null, cur, prev;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    list = pathExpression(PathNode.ORDER_BY);
                                               prev = list;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      cur = pathExpression(PathNode.ORDER_BY);
                                                        prev.setNext(cur); prev = cur;
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Node groupByClause() throws ParseException {
    Node list = null, cur, prev;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    list = pathExpression(PathNode.GROUP_BY);
                                               prev = list;
    label_5:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      cur = pathExpression(PathNode.GROUP_BY);
                                                                     prev.setNext(cur); prev = cur;
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Node selectExpression() throws ParseException {
    Node e;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = pathExpression(PathNode.SELECT);
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
      jj_consume_token(LPAREN);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
                                                    e = new ObjectNode(t.image);
      break;
    case AVG:
    case MAX:
    case MIN:
    case SUM:
    case COUNT:
      e = aggregateSelectExpression();
      break;
    case NEW:
      e = constructorExpression();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public PathNode pathExpression(int parentType) throws ParseException {
    PathNode e = new PathNode(parentType);
    Token t;
    t = jj_consume_token(IDENTIFIER);
                       e.add(t.image);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case SELECT:
      case FROM:
      case DISTINCT:
      case OBJECT:
      case LEFT:
      case OUTER:
      case INNER:
      case JOIN:
      case FETCH:
      case IN:
      case AS:
      case UPDATE:
      case SET:
      case DELETE:
      case NEW:
      case AVG:
      case MAX:
      case MIN:
      case SUM:
      case COUNT:
      case WHERE:
      case GROUP:
      case BY:
      case HAVING:
      case OR:
      case AND:
      case NOT:
      case BETWEEN:
      case LIKE:
      case ESCAPE:
      case IS:
      case EMPTY:
      case MEMBER:
      case OF:
      case EXISTS:
      case ALL:
      case ANY:
      case SOME:
      case CONCAT:
      case SUBSTRING:
      case TRIM:
      case LOWER:
      case UPPER:
      case LEADING:
      case TRAILING:
      case BOTH:
      case LENGTH:
      case LOCATE:
      case ABS:
      case SQRT:
      case MOD:
      case BIT_LENGTH:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case ORDER:
      case ASC:
      case DESC:
        t = reservedWord();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                        e.add(t.image);
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AggregateNode aggregateSelectExpression() throws ParseException {
    int op;
    boolean distinct = false;
    PathNode path;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
      jj_consume_token(AVG);
                  op = AggregateNode.AVG;
      break;
    case MAX:
      jj_consume_token(MAX);
                  op = AggregateNode.MAX;
      break;
    case MIN:
      jj_consume_token(MIN);
                  op = AggregateNode.MIN;
      break;
    case SUM:
      jj_consume_token(SUM);
                  op = AggregateNode.SUM;
      break;
    case COUNT:
      jj_consume_token(COUNT);
                  op = AggregateNode.COUNT;
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                   distinct = true;
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    path = pathExpression(PathNode.AGGREGATE);
    jj_consume_token(RPAREN);
      {if (true) return new AggregateNode(op, distinct, path);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorNode constructorExpression() throws ParseException {
    Token t;
    ConstructorNode e;
    Node cur, prev;
    jj_consume_token(NEW);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      prev = pathExpression(PathNode.CONSTRUCTOR);
      break;
    case AVG:
    case MAX:
    case MIN:
    case SUM:
    case COUNT:
      prev = aggregateSelectExpression();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        e = new ConstructorNode(t.image, prev);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        cur = pathExpression(PathNode.CONSTRUCTOR);
        break;
      case AVG:
      case MAX:
      case MIN:
      case SUM:
      case COUNT:
        cur = aggregateSelectExpression();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            prev.setNext(cur); prev = cur;
    }
    jj_consume_token(RPAREN);
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public IdentificationVarNode identificationVarDeclaration() throws ParseException {
    Token t, t2;
    JoinNode list = null, prev = null, cur;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    t2 = jj_consume_token(IDENTIFIER);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
      case INNER:
      case JOIN:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      cur = join();
        if (list == null) { list = prev = cur; }
        else { prev.setNext(cur); prev = cur; }
    }
      {if (true) return new IdentificationVarNode(t.image, t2.image, list);}
    throw new Error("Missing return statement in function");
  }

  final public JoinNode join() throws ParseException {
    boolean outer = false;
    PathNode path;
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT:
    case INNER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
                             outer = true;
        break;
      case INNER:
        jj_consume_token(INNER);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(JOIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FETCH:
      jj_consume_token(FETCH);
      path = pathExpression(PathNode.JOIN);
      break;
    case IDENTIFIER:
      path = pathExpression(PathNode.JOIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new JoinNode(outer, t == null, path, t == null ? null : t.image);}
    throw new Error("Missing return statement in function");
  }

  final public CollectionMemberNode collectionMemberDeclaration() throws ParseException {
    PathNode path;
    Token t;
    jj_consume_token(IN);
    jj_consume_token(LPAREN);
    path = pathExpression(PathNode.COLLECTION_MEMBER);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
      {if (true) return new CollectionMemberNode(path, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Node conditionalExpression() throws ParseException {
    Node e, e2;
    e = conditionalTerm();
    if (jj_2_4(2)) {
      jj_consume_token(OR);
      e2 = conditionalExpression();
                                                       e.setNext(e2); e = new OrNode(e);
    } else {
      ;
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node conditionalTerm() throws ParseException {
    Node e, e2;
    e = conditionalFactor();
    if (jj_2_5(2)) {
      jj_consume_token(AND);
      e2 = conditionalTerm();
                                                  e.setNext(e2); e = new AndNode(e);
    } else {
      ;
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node conditionalFactor() throws ParseException {
    Node e;
    boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
              not = true;
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    if (jj_2_6(2)) {
      e = simpleCondExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        e = conditionalExpression();
        jj_consume_token(RPAREN);
                                                        e = new ParenNode(e);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return not ? new NotNode(e) : e;}
    throw new Error("Missing return statement in function");
  }

  final public Node simpleCondExpression() throws ParseException {
    Node left, e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case QUESTION:
    case COLON:
    case CONCAT:
    case SUBSTRING:
    case TRIM:
    case LOWER:
    case UPPER:
    case LENGTH:
    case LOCATE:
    case ABS:
    case SQRT:
    case MOD:
    case BIT_LENGTH:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 93:
    case 94:
      left = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case LT:
      case LE:
      case GT:
      case GE:
      case NE:
        e = compExpression(left);
        break;
      default:
        jj_la1[35] = jj_gen;
        if (jj_2_7(2)) {
          e = betweenExpression(left);
        } else if (jj_2_8(2)) {
          e = likeExpression(left);
        } else if (jj_2_9(2)) {
          e = inExpression(left);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MEMBER:
            e = memberCompExpression(left);
            break;
          default:
            jj_la1[36] = jj_gen;
            if (jj_2_10(3)) {
              e = emptyCompExpression(left);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IS:
                e = nullCompExpression(left);
                break;
              default:
                jj_la1[37] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
      break;
    case EXISTS:
      e = existsExpression();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node betweenExpression(Node arg) throws ParseException {
    Node from, to;
    boolean not = false;
    jj_consume_token(BETWEEN);
    from = expression();
    jj_consume_token(AND);
    to = expression();
      {if (true) return new BetweenNode(arg, not, from, to);}
    throw new Error("Missing return statement in function");
  }

  final public Node inExpression(Node path) throws ParseException {
    boolean not = false;
    Node list;
    jj_consume_token(IN);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      list = subquery();
      break;
    case QUESTION:
    case COLON:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
      list = inList();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
      {if (true) return new InNode(path, not, list);}
    throw new Error("Missing return statement in function");
  }

  final public Node inList() throws ParseException {
    Node list = null, prev = null, cur;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
      cur = literal();
      break;
    case QUESTION:
    case COLON:
      cur = inputParameter();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          list = prev = cur;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
        cur = literal();
        break;
      case QUESTION:
      case COLON:
        cur = inputParameter();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          prev.setNext(cur); prev = cur;
    }
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public LiteralNode literal() throws ParseException {
    LiteralNode e;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
                              e = new LiteralNode(LiteralNode.LONG, t.image);
      break;
    case HEX_LITERAL:
      t = jj_consume_token(HEX_LITERAL);
                          e = new LiteralNode(LiteralNode.LONG, t.image);
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                     e = new LiteralNode(LiteralNode.DOUBLE, t.image);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                                e = new LiteralNode(LiteralNode.STRING, t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                             e = new LiteralNode(LiteralNode.STRING, t.image);
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                              e = new LiteralNode(LiteralNode.BOOLEAN, t.image);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ParameterNode inputParameter() throws ParseException {
    Token t;
    boolean positional = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      jj_consume_token(QUESTION);
      t = jj_consume_token(DECIMAL_LITERAL);
                                         positional = true;
      break;
    case COLON:
      jj_consume_token(COLON);
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new ParameterNode(positional, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public LikeNode likeExpression(Node path) throws ParseException {
    boolean not = false;
    Node pattern, escape = null;
    jj_consume_token(LIKE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
      pattern = literal();
      break;
    case QUESTION:
    case COLON:
      pattern = inputParameter();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESCAPE:
      jj_consume_token(ESCAPE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
        escape = literal();
        break;
      case QUESTION:
      case COLON:
        escape = inputParameter();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
      {if (true) return new LikeNode(path, not, pattern, escape);}
    throw new Error("Missing return statement in function");
  }

  final public NullCompNode nullCompExpression(Node arg) throws ParseException {
    boolean not = false;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                   not = true;
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
      {if (true) return new  NullCompNode(arg, not);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyCompNode emptyCompExpression(Node path) throws ParseException {
    boolean not = false;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                   not = true;
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(EMPTY);
      {if (true) return new  EmptyCompNode(path, not);}
    throw new Error("Missing return statement in function");
  }

  final public MemberCompNode memberCompExpression(Node arg) throws ParseException {
    boolean not = false;
    PathNode path;
    jj_consume_token(MEMBER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OF:
      jj_consume_token(OF);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    path = pathExpression(PathNode.WHERE);
      {if (true) return new MemberCompNode(arg, not, path);}
    throw new Error("Missing return statement in function");
  }

  final public ExistsNode existsExpression() throws ParseException {
    boolean not = false;
    SelectNode sub;
    jj_consume_token(EXISTS);
    jj_consume_token(LPAREN);
    sub = subquery();
    jj_consume_token(RPAREN);
      {if (true) return new ExistsNode(not, sub);}
    throw new Error("Missing return statement in function");
  }

  final public SelectNode subquery() throws ParseException {
    boolean distinct = false;
    Node selectList = null, fromList = null, where = null, groupBy = null;
    Node having = null;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                            distinct = true;
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    selectList = selectExpression();
    fromList = fromClause();
    if (jj_2_11(2)) {
      jj_consume_token(WHERE);
      where = conditionalExpression();
    } else {
      ;
    }
    if (jj_2_12(2)) {
      groupBy = groupByClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        jj_consume_token(HAVING);
        having = conditionalExpression();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } else {
      ;
    }
      {if (true) return new SelectNode(distinct, selectList, fromList, where,
        groupBy, having, null);}
    throw new Error("Missing return statement in function");
  }

  final public AllOrAnyNode allOrAnyExpression() throws ParseException {
    boolean all = false;
    SelectNode sub;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
              all = true;
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    case SOME:
      jj_consume_token(SOME);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    sub = subquery();
    jj_consume_token(RPAREN);
      {if (true) return new AllOrAnyNode(all, sub);}
    throw new Error("Missing return statement in function");
  }

  final public Node compExpression(Node left) throws ParseException {
    Node right;
    int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
             op = CompNode.EQ;
      break;
    case LT:
      jj_consume_token(LT);
             op = CompNode.LT;
      break;
    case LE:
      jj_consume_token(LE);
             op = CompNode.LE;
      break;
    case GT:
      jj_consume_token(GT);
             op = CompNode.GT;
      break;
    case GE:
      jj_consume_token(GE);
             op = CompNode.GE;
      break;
    case NE:
      jj_consume_token(NE);
             op = CompNode.NE;
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case QUESTION:
    case COLON:
    case CONCAT:
    case SUBSTRING:
    case TRIM:
    case LOWER:
    case UPPER:
    case LENGTH:
    case LOCATE:
    case ABS:
    case SQRT:
    case MOD:
    case BIT_LENGTH:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 93:
    case 94:
      right = expression();
      break;
    case ALL:
    case ANY:
    case SOME:
      right = allOrAnyExpression();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new CompNode(left, op, right);}
    throw new Error("Missing return statement in function");
  }

  final public Node expression() throws ParseException {
    Node left, right;
    int op;
    left = term();
    if (jj_2_13(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
                           op = AddNode.ADD;
        break;
      case 94:
        jj_consume_token(94);
              op = AddNode.SUBTRACT;
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = expression();
                                left = new AddNode(left, op, right);
    } else {
      ;
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Node term() throws ParseException {
    Node left, right;
    int op;
    left = factor();
    if (jj_2_14(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
                           op = MultiplyNode.MULTIPLY;
        break;
      case 96:
        jj_consume_token(96);
              op = MultiplyNode.DIVIDE;
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = term();
                          left = new MultiplyNode(left, op, right);
    } else {
      ;
    }
      {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Node factor() throws ParseException {
    boolean neg = false;
    Node e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 93:
    case 94:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        break;
      case 94:
        jj_consume_token(94);
                    neg = true;
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = pathExpression(PathNode.WHERE);
      break;
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
      e = literal();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      e = subquery();
      jj_consume_token(RPAREN);
      break;
    case QUESTION:
    case COLON:
      e = inputParameter();
      break;
    case LENGTH:
    case LOCATE:
    case ABS:
    case SQRT:
    case MOD:
    case BIT_LENGTH:
      e = numericFunction();
      break;
    case CONCAT:
    case SUBSTRING:
    case TRIM:
    case LOWER:
    case UPPER:
      e = stringFunction();
      break;
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
      e = dateFunction();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return neg ? new UnaryMinusNode(e) : e;}
    throw new Error("Missing return statement in function");
  }

  final public StringFunctionNode stringFunction() throws ParseException {
    Node arg1, arg2, arg3;
    int trimSpec = 0;
    LiteralNode trimChar = null;
    StringFunctionNode f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONCAT:
      jj_consume_token(CONCAT);
      jj_consume_token(LPAREN);
      arg1 = expression();
      jj_consume_token(COMMA);
      arg2 = expression();
                                    arg1.setNext(arg2);
        f = new StringFunctionNode(StringFunctionNode.CONCAT, arg1);
      break;
    case SUBSTRING:
      jj_consume_token(SUBSTRING);
      jj_consume_token(LPAREN);
      arg1 = expression();
      jj_consume_token(COMMA);
      arg2 = expression();
                                    arg1.setNext(arg2);
      jj_consume_token(COMMA);
      arg3 = expression();
                                    arg2.setNext(arg3);
        f = new StringFunctionNode(StringFunctionNode.SUBSTRING, arg1);
      break;
    case LOWER:
      jj_consume_token(LOWER);
      jj_consume_token(LPAREN);
      arg1 = expression();
        f = new StringFunctionNode(StringFunctionNode.LOWER, arg1);
      break;
    case UPPER:
      jj_consume_token(UPPER);
      jj_consume_token(LPAREN);
      arg1 = expression();
        f = new StringFunctionNode(StringFunctionNode.UPPER, arg1);
      break;
    case TRIM:
      jj_consume_token(TRIM);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEADING:
      case TRAILING:
      case BOTH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEADING:
          jj_consume_token(LEADING);
                      trimSpec = StringFunctionNode.TRIM_LEADING;
          break;
        case TRAILING:
          jj_consume_token(TRAILING);
                       trimSpec = StringFunctionNode.TRIM_TRAILING;
          break;
        case BOTH:
          jj_consume_token(BOTH);
                   trimSpec = StringFunctionNode.TRIM_BOTH;
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        trimChar = literal();
        jj_consume_token(FROM);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      arg1 = expression();
        f = new StringFunctionNode(trimSpec, trimChar, arg1);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public NumericFunctionNode numericFunction() throws ParseException {
    Node arg1, arg2, arg3;
    NumericFunctionNode f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      jj_consume_token(LENGTH);
      jj_consume_token(LENGTH);
      arg1 = expression();
        f = new NumericFunctionNode(NumericFunctionNode.LENGTH, arg1);
      break;
    case ABS:
      jj_consume_token(ABS);
      jj_consume_token(ABS);
      arg1 = expression();
        f = new NumericFunctionNode(NumericFunctionNode.ABS, arg1);
      break;
    case SQRT:
      jj_consume_token(SQRT);
      jj_consume_token(SQRT);
      arg1 = expression();
        f = new NumericFunctionNode(NumericFunctionNode.SQRT, arg1);
      break;
    case BIT_LENGTH:
      jj_consume_token(BIT_LENGTH);
      jj_consume_token(BIT_LENGTH);
      arg1 = expression();
        f = new NumericFunctionNode(NumericFunctionNode.BIT_LENGTH, arg1);
      break;
    case MOD:
      jj_consume_token(MOD);
      jj_consume_token(MOD);
      arg1 = expression();
      jj_consume_token(COMMA);
      arg2 = expression();
                                    arg1.setNext(arg2);
        f = new NumericFunctionNode(NumericFunctionNode.MOD, arg1);
      break;
    case LOCATE:
      jj_consume_token(LOCATE);
      jj_consume_token(LOCATE);
      arg1 = expression();
      jj_consume_token(COMMA);
      arg2 = expression();
                                    arg1.setNext(arg2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        arg3 = expression();
                                      arg2.setNext(arg3);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
        f = new NumericFunctionNode(NumericFunctionNode.LOCATE, arg1);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public DateFunctionNode dateFunction() throws ParseException {
    int function;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CURRENT_DATE:
      jj_consume_token(CURRENT_DATE);
                       function = DateFunctionNode.CURRENT_DATE;
      break;
    case CURRENT_TIME:
      jj_consume_token(CURRENT_TIME);
                       function = DateFunctionNode.CURRENT_TIME;
      break;
    case CURRENT_TIMESTAMP:
      jj_consume_token(CURRENT_TIMESTAMP);
                            function = DateFunctionNode.CURRENT_TIMESTAMP;
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new DateFunctionNode(function);}
    throw new Error("Missing return statement in function");
  }

  final public Token reservedWord() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      t = jj_consume_token(SELECT);
      break;
    case FROM:
      t = jj_consume_token(FROM);
      break;
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
      break;
    case OBJECT:
      t = jj_consume_token(OBJECT);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case OUTER:
      t = jj_consume_token(OUTER);
      break;
    case INNER:
      t = jj_consume_token(INNER);
      break;
    case JOIN:
      t = jj_consume_token(JOIN);
      break;
    case FETCH:
      t = jj_consume_token(FETCH);
      break;
    case IN:
      t = jj_consume_token(IN);
      break;
    case AS:
      t = jj_consume_token(AS);
      break;
    case UPDATE:
      t = jj_consume_token(UPDATE);
      break;
    case SET:
      t = jj_consume_token(SET);
      break;
    case DELETE:
      t = jj_consume_token(DELETE);
      break;
    case NEW:
      t = jj_consume_token(NEW);
      break;
    case AVG:
      t = jj_consume_token(AVG);
      break;
    case MAX:
      t = jj_consume_token(MAX);
      break;
    case MIN:
      t = jj_consume_token(MIN);
      break;
    case SUM:
      t = jj_consume_token(SUM);
      break;
    case COUNT:
      t = jj_consume_token(COUNT);
      break;
    case WHERE:
      t = jj_consume_token(WHERE);
      break;
    case GROUP:
      t = jj_consume_token(GROUP);
      break;
    case BY:
      t = jj_consume_token(BY);
      break;
    case HAVING:
      t = jj_consume_token(HAVING);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case NOT:
      t = jj_consume_token(NOT);
      break;
    case BETWEEN:
      t = jj_consume_token(BETWEEN);
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
      break;
    case ESCAPE:
      t = jj_consume_token(ESCAPE);
      break;
    case IS:
      t = jj_consume_token(IS);
      break;
    case EMPTY:
      t = jj_consume_token(EMPTY);
      break;
    case MEMBER:
      t = jj_consume_token(MEMBER);
      break;
    case OF:
      t = jj_consume_token(OF);
      break;
    case EXISTS:
      t = jj_consume_token(EXISTS);
      break;
    case ALL:
      t = jj_consume_token(ALL);
      break;
    case ANY:
      t = jj_consume_token(ANY);
      break;
    case SOME:
      t = jj_consume_token(SOME);
      break;
    case CONCAT:
      t = jj_consume_token(CONCAT);
      break;
    case SUBSTRING:
      t = jj_consume_token(SUBSTRING);
      break;
    case TRIM:
      t = jj_consume_token(TRIM);
      break;
    case LOWER:
      t = jj_consume_token(LOWER);
      break;
    case UPPER:
      t = jj_consume_token(UPPER);
      break;
    case LEADING:
      t = jj_consume_token(LEADING);
      break;
    case TRAILING:
      t = jj_consume_token(TRAILING);
      break;
    case BOTH:
      t = jj_consume_token(BOTH);
      break;
    case LENGTH:
      t = jj_consume_token(LENGTH);
      break;
    case LOCATE:
      t = jj_consume_token(LOCATE);
      break;
    case ABS:
      t = jj_consume_token(ABS);
      break;
    case SQRT:
      t = jj_consume_token(SQRT);
      break;
    case MOD:
      t = jj_consume_token(MOD);
      break;
    case BIT_LENGTH:
      t = jj_consume_token(BIT_LENGTH);
      break;
    case CURRENT_DATE:
      t = jj_consume_token(CURRENT_DATE);
      break;
    case CURRENT_TIME:
      t = jj_consume_token(CURRENT_TIME);
      break;
    case CURRENT_TIMESTAMP:
      t = jj_consume_token(CURRENT_TIMESTAMP);
      break;
    case ORDER:
      t = jj_consume_token(ORDER);
      break;
    case ASC:
      t = jj_consume_token(ASC);
      break;
    case DESC:
      t = jj_consume_token(DESC);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_3_12() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(CURRENT_TIMESTAMP)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(CURRENT_TIME)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(CURRENT_DATE)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(MEMBER)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_scan_token(EMPTY)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(LOCATE)) return true;
    if (jj_scan_token(LOCATE)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(MOD)) return true;
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(BIT_LENGTH)) return true;
    if (jj_scan_token(BIT_LENGTH)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(SQRT)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(LIKE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(TRIM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(UPPER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LOWER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(SUBSTRING)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(93)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(94)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  public EJBQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[68];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x800000,0x1001,0x2000000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x4000000,0x4000,0xff800000,0x0,0x2000000,0x0,0x2000,0x0,0x0,0x68000000,0x10000000,0x28000000,0x28000000,0x0,0x80000000,0x0,0x0,0x40,0x7e0000,0x0,0x0,0x18040,0x818000,0x18000,0x2000,0x18000,0x0,0x18000,0x18000,0x18000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x7e0000,0x18040,0x0,0x0,0x0,0x0,0x18040,0x0,0x0,0x0,0x2000,0x0,0x0,0xff800000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x14,0x0,0x0,0x0,0x800,0x4000,0x1000,0x0,0x2,0x2,0x800,0x2,0x2,0x0,0x800,0x1,0x0,0x7e0,0x0,0xffffffff,0x7c0,0x0,0x7c0,0x0,0x7c0,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x20000,0x0,0x0,0x800000,0x200000,0xe2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x20000,0x20000,0x1000000,0x0,0x4000,0x1c000000,0x0,0xfc000000,0x0,0x0,0x0,0x0,0xe0000000,0x0,0x0,0xe0000000,0x0,0x0,0x0,0xffffffff,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x401ffff,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x67563fe3,0x3560000,0x3560000,0x0,0x3560000,0x3560000,0x0,0x3560000,0x3560000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x67563fe3,0x60000000,0x80000000,0x60000000,0x60000000,0x7563fe3,0x1c,0x1c,0x3,0x0,0x7e0,0x3800,0x1ffff,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public EJBQLParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new EJBQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EJBQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new EJBQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EJBQLParser(EJBQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(EJBQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 68; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[97];
    for (int i = 0; i < 97; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 68; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 97; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
