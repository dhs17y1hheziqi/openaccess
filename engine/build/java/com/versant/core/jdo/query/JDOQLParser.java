
/*
 * Copyright (c) 1998 - 2005 Versant Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Versant Corporation - initial API and implementation
 */
/* Generated By:JavaCC: Do not edit this line. JDOQLParser.java */
package com.versant.core.jdo.query;

import com.versant.core.util.CharBuf;
import com.versant.core.util.IntArray;

import java.util.ArrayList;

/**
 * JavaCC generated parser. Do not put a main method in this class as that
 * breaks obfuscation.
 */
public class JDOQLParser implements JDOQLParserConstants {

    /**
     * Put method name to the method node
     * for example a.b.c() is FieldNavNode a, FieldNavNode b, FieldNode c and MethodNode ()  [ name = null ]
     * after this method a.b.c() becomes FieldNavNode a, FieldNode b  MethodNode () [name = c ]
     * if the Primary expresssion resolves to a method only then that method is returned instead
     * of PrimaryExprNode this.
     */


        private void moveMethodName(MethodNode method){
                Node left = method.childList;
                if(left == null ){
                        return;
                }
                if(left instanceof FieldNode ){
                        FieldNode f = (FieldNode)left;
                        method.setName(f.lexeme);
                        f.lexeme = "this";
                }else if( left instanceof FieldNavNode){
                        Node n = left, next = left.next;
                        while(!(n.childList instanceof FieldNode))n = n.childList;
                        FieldNode f = (FieldNode)n.childList;
                        method.setName(f.lexeme);

                        //Reset the FieldNode to it's parent
                        f.lexeme = ((FieldNavNode)n).lexeme;
                        f.parent = n.parent;
                        n.parent.childList = f;

                        //Reset next
                        method.childList.next = next;
                }

        }
        public Node resolveMethod(Node node){
        for(Node current = node.childList, previous = null;
                                current != null;){
            if(current.next instanceof MethodNode){
                MethodNode currentMethod = (MethodNode)current.next;

                                if(previous != null){
                                        previous.next = currentMethod;
                                }else{
                                        node.childList = currentMethod;
                                }
                                current.next = currentMethod.childList;
                                currentMethod.childList = current;
                                current.parent = currentMethod;

                                moveMethodName(currentMethod);

                                current = currentMethod;
                        }else{
                                previous = current;
                                current = current.next;
                        }
                }


                resolveMethod2(node);
                /*
		if(node.childList.next == null){
			return node.childList;
		}
		*/
                return node;
        }

         public Node resolveMethod2(Node node){
        for(Node current = node.childList, previous = null;
                                current != null;){
            if(current.next instanceof MethodNode){
                MethodNode currentMethod = (MethodNode)current.next;

                                if(previous != null){
                                        previous.next = currentMethod;
                                }else{
                                        node.childList = currentMethod;
                                }
                                current.next = (currentMethod.childList instanceof FieldNode
                                        && ((FieldNode)currentMethod.childList).lexeme.equals("this"))?
                                        currentMethod.childList.next : currentMethod.childList;

                                currentMethod.childList = current;
                                current.parent = currentMethod;

                                current = currentMethod;
                        }else{
                                previous = current;
                                current = current.next;
                        }
                }

                return node;
        }

    public static void main(String args[])throws Exception{
                JDOQLParser parser = new JDOQLParser(System.in);
                System.out.println("Type some input and Ctrl-D to parse :");
                //parser.literal();
                //parser.type().dump(" ");
                parser.filterExpression().dump(" ");
                //Node nodes[] = parser.declareVariables();
                //Node nodes[] = parser.declareImports();
                //Node nodes[] = parser.setOrderings();
                /*Node nodes[] = parser.declareParameters();
		if(nodes != null){
			for(int i=0; i<nodes.length; i++){
				nodes[i].dump(">>>");
				System.out.println();
			}
		}*/
        }

/**
  * Parameter declaration
  */
  final public ParamNode[] declareParameters() throws ParseException {
        ArrayList list = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      parameters(list);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
                int size = list.size();
                ParamNode[] params = new ParamNode[size];
                for(int i = 0; i < size; params[i] = (ParamNode)list.get(i++));
                {if (true) return params;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void parameters(ArrayList list) throws ParseException {
                                  ParamNode n;
    n = parameter();
                        list.add(n);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(COMMA);
      n = parameter();
                                                                             list.add(n);
    }
  }

  final public ParamNode parameter() throws ParseException {
    ParamNode n = new ParamNode();
    Token t;
    Object tp;
    tp = type();
    t = jj_consume_token(IDENTIFIER);
        if (tp instanceof Class) n.setCls((Class)tp);
        else n.setType((String)tp);
                n.setIdentifier(t.image);
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
  * variable declaration
  */
  final public VarNode[] declareVariables() throws ParseException {
        ArrayList list = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      variables(list);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(0);
                int size = list.size();
                VarNode[] Vars = new VarNode[size];
                for(int i = 0; i < size; Vars[i] = (VarNode)list.get(i++));
                {if (true) return Vars;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void variables(ArrayList list) throws ParseException {
VarNode n;
    n = variable();
                       list.add(n);
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(SEMICOLON);
      n = variable();
                                                                              list.add(n);
    }
  }

  final public VarNode variable() throws ParseException {
        VarNode n = new VarNode();
        Token t;
    Object tp;
    tp = type();
    t = jj_consume_token(IDENTIFIER);
        if (tp instanceof Class) n.setCls((Class)tp);
        else n.setType((String)tp);
                n.setIdentifier(t.image);
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
  * Import declaration
  */
  final public ImportNode[] declareImports() throws ParseException {
        ArrayList list = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      importDeclarations(list);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
                int size = list.size();
                ImportNode[] imports = new ImportNode[size];
                for(int i = 0; i < size; imports[i] = (ImportNode)list.get(i++));
                {if (true) return imports;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void importDeclarations(ArrayList list) throws ParseException {
                                          ImportNode n;
    n = importDeclaration();
                                list.add(n);
    label_3:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(SEMICOLON);
      n = importDeclaration();
                                                           list.add(n);
    }
  }

  final public ImportNode importDeclaration() throws ParseException {
        ImportNode n = new ImportNode();
        Token t;
        StringBuffer sb = new StringBuffer();
    jj_consume_token(IMPORT);
    t = jj_consume_token(IDENTIFIER);
                                   sb.append(t.image);
    label_4:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                                        sb.append("."); sb.append(t.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(STAR);
                                     sb.append("."); n.all = true;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                n.name = sb.toString();
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
  * orderSpecification declaration
  */
  final public OrderNode[] setOrderings() throws ParseException {
        ArrayList list = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAX:
    case MIN:
    case AVG:
    case COUNT_STAR:
    case COUNT:
    case SUM:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case NULL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      orderSpecifications(list);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                int size = list.size();
                OrderNode[] orders = new OrderNode[size];
                for(int i = 0; i < size; orders[i] = (OrderNode)list.get(i++));
                {if (true) return orders;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void orderSpecifications(ArrayList list) throws ParseException {
                                           OrderNode n;
    n = orderSpecification();
                                 list.add(n);
    label_5:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      n = orderSpecification();
                                                                                               list.add(n);
    }
  }

  final public OrderNode orderSpecification() throws ParseException {
        OrderNode n = new OrderNode();
    n.childList = unaryExpressionNotPlusMinus();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASCENDING:
      jj_consume_token(ASCENDING);
                              n.order=OrderNode.ORDER_ASCENDING;
      break;
    case DESCENDING:
      jj_consume_token(DESCENDING);
                                   n.order = OrderNode.ORDER_DESCENDING;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                n.childList.parent = n;
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

/**
  * orderSpecification declaration
  */
  final public ResultNode setResults() throws ParseException {
    ResultNode rNode = null;
    Node current = null;
    boolean distinct = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                    distinct = true;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    current = setResultsImp(rNode);
        rNode = new ResultNode(current);
        current.parent = rNode;
        rNode.setDistinct(distinct);
    label_6:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      current.next = setResultsImp(rNode);
                                                                  current = current.next;
    }
        {if (true) return rNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node setResultsImp(Node parent) throws ParseException {
    Node n = null;
    if (jj_2_7(2147483647)) {
      jj_consume_token(COUNT_STAR);
                                          n = new AggregateCountStarNode(parent);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        AsClause(n);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
                                                                                                        {if (true) return n;}
    } else if (jj_2_8(2147483647)) {
      jj_consume_token(COUNT);
      n = aggregateNode(AggregateNode.TYPE_COUNT, parent);
                                                                                    {if (true) return n;}
    } else if (jj_2_9(2147483647)) {
      jj_consume_token(AVG);
      n = aggregateNode(AggregateNode.TYPE_AVG, parent);
                                                                              {if (true) return n;}
    } else if (jj_2_10(2147483647)) {
      jj_consume_token(SUM);
      n = aggregateNode(AggregateNode.TYPE_SUM, parent);
                                                                              {if (true) return n;}
    } else if (jj_2_11(2147483647)) {
      jj_consume_token(MIN);
      n = aggregateNode(AggregateNode.TYPE_MIN, parent);
                                                                              {if (true) return n;}
    } else if (jj_2_12(2147483647)) {
      jj_consume_token(MAX);
      n = aggregateNode(AggregateNode.TYPE_MAX, parent);
                                                                              {if (true) return n;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
      case MIN:
      case AVG:
      case COUNT_STAR:
      case COUNT:
      case SUM:
      case THIS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case NULL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
        n = unExpImp();
                    n.parent = parent; {if (true) return n;}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Node aggregateNode(int type, Node parent) throws ParseException {
    AggregateNode an = null;
    Node n = null;
    n = unExpImp();
     an = new AggregateNode(n, type);
     an.parent = parent; {if (true) return an;}
    throw new Error("Missing return statement in function");
  }

  final public Node unExpImp() throws ParseException {
    Node n = null;
    n = unaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      AsClause(n);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
                                              {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void AsClause(Node n) throws ParseException {
    Token t = null;
    t = jj_consume_token(IDENTIFIER);
                      n.asValue = t.image;
  }

/**
* (LOOKAHEAD(<COMMA>) <COMMA> current.next = setGroupingImp(gNode, gNode) {current = current.next; })*
*/
  final public GroupingNode setGrouping() throws ParseException {
    Node current = null;
    GroupingNode gNode = null;
    Node having = null;
    current = setGroupingImp(gNode, gNode);
        gNode = new GroupingNode();
        gNode.childList = current;
        current.parent = gNode;
    label_7:
    while (true) {
      if (jj_2_13(2147483647)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      current.next = setGroupingImp(gNode, gNode);
                                                                             current = current.next;
    }
    if (jj_2_14(2147483647)) {
      jj_consume_token(HAVING);
      having = orExpression();
                                                           gNode.havingNode = having; having.parent = gNode;
    } else {
      ;
    }
     {if (true) return gNode;}
    throw new Error("Missing return statement in function");
  }

/**
*[LOOKAHEAD(<HAVING>) <HAVING> having = unaryExpression(){gNode.havingNode = having; having.parent = gNode;}]
*/
  final public Node setGroupingImp(Node parent, GroupingNode gNode) throws ParseException {
    Node n = null;
    Node having = null;
    n = unaryExpression();
        n.parent = parent;
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node nameOrThis() throws ParseException {
        Node n = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = name();
                     {if (true) return n;}
      break;
    case THIS:
      jj_consume_token(THIS);
                   {if (true) return new ReservedFieldNode(ReservedFieldNode.TYPE_THIS, "this");}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

 /**
  * Filter Expression
  */
  final public Node filterExpression() throws ParseException {
                           Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAX:
    case MIN:
    case AVG:
    case COUNT_STAR:
    case COUNT:
    case SUM:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case NULL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
      n = orExpression();
      jj_consume_token(0);
                {if (true) return n;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node orExpression() throws ParseException {
        OrNode node = new OrNode();
        Node n = null;
    Node pos = null;
    n = andExpression();
    pos = node.childList = n;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        jj_consume_token(SC_OR);
        break;
      case BIT_OR:
        jj_consume_token(BIT_OR);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = andExpression();
    pos = pos.next = n;
    }
    if (pos == node.childList) {if (true) return n;}
    node.setParentOnChildren();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public Node andExpression() throws ParseException {
        AndNode node = new AndNode();
        Node n = null;
    Node pos = null;
    if (jj_2_15(2147483647)) {
      n = equalityExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
      case MIN:
      case AVG:
      case COUNT_STAR:
      case COUNT:
      case SUM:
      case THIS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case NULL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
        n = inequalityExpression();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    pos = node.childList = n;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        jj_consume_token(SC_AND);
        break;
      case BIT_AND:
        jj_consume_token(BIT_AND);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_16(2147483647)) {
        n = equalityExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAX:
        case MIN:
        case AVG:
        case COUNT_STAR:
        case COUNT:
        case SUM:
        case THIS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case NULL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:
          n = inequalityExpression();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        pos = pos.next = n;
    }
    if (pos == node.childList) {if (true) return n;}
    node.setParentOnChildren();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public Node equalityExpression() throws ParseException {
        Node n1;
        Node n2;
    n1 = relationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      n2 = relationalExpression();
                        n1 = new EqualNode(n1, n2);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                //System.out.println("returning equality = "+n1);
                {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Node inequalityExpression() throws ParseException {
        Node n1;
        Node n2;
    n1 = relationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NE:
      jj_consume_token(NE);
      n2 = relationalExpression();
                        n1 = new NotEqualNode(n1, n2);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                //System.out.println("returning inequality = "+n1);
                {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Node relationalExpression() throws ParseException {
        Node n1;
        Node n2;
    int op = 0;
    n1 = additiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
    case LT:
    case LE:
    case GE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
                         op = CompareOpNode.LT;
        break;
      case GT:
        jj_consume_token(GT);
                     op = CompareOpNode.GT;
        break;
      case LE:
        jj_consume_token(LE);
                         op = CompareOpNode.LE;
        break;
      case GE:
        jj_consume_token(GE);
                         op = CompareOpNode.GE;
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = additiveExpression();
        n1 = new CompareOpNode(n1, n2, op);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
           //System.out.println("returning relational = "+n1);
           {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public Node additiveExpression() throws ParseException {
        AddNode node = new AddNode();
        Node n = null;
    Node pos = null;
    IntArray ops = new IntArray();
    n = multiplicativeExpression();
    pos = node.childList = n;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
            ops.add(node.OP_PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
             ops.add(node.OP_MINUS);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = multiplicativeExpression();
    pos = pos.next = n;
    }
    if (pos == node.childList) {if (true) return n;}
    node.setParentOnChildren();
    node.ops = ops.toArray();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public Node multiplicativeExpression() throws ParseException {
        MultiplyNode node = new MultiplyNode();
        Node n = null;
    Node pos = null;
    IntArray ops = new IntArray();
    n = unaryExpression();
    pos = node.childList = n;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
            ops.add(node.OP_TIMES);
        break;
      case SLASH:
        jj_consume_token(SLASH);
                  ops.add(node.OP_DIVIDE);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = unaryExpression();
    pos = pos.next = n;
    }
    if (pos == node.childList) {if (true) return n;}
    node.setParentOnChildren();
    node.ops = ops.toArray();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public Node unaryExpression() throws ParseException {
        Node n;
    int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                  op = UnaryOpNode.OP_PLUS;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                    op = UnaryOpNode.OP_MINUS;
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = unaryExpression();
        {if (true) return new UnaryOpNode(n, op);}
      break;
    case MAX:
    case MIN:
    case AVG:
    case COUNT_STAR:
    case COUNT:
    case SUM:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case NULL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      n = unaryExpressionNotPlusMinus();
                //System.out.println("returning  unaryExpression = "+n);
                {if (true) return n;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node unaryExpressionNotPlusMinus() throws ParseException {
    Node n;
    int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
                   op = UnaryOpNode.OP_TILDE;
        break;
      case BANG:
        jj_consume_token(BANG);
                   op = UnaryOpNode.OP_BANG;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n = unaryExpression();
        {if (true) return new UnaryOpNode(n, op);}
      break;
    default:
      jj_la1[33] = jj_gen;
      if (jj_2_17(2147483647)) {
        n = castExpression();
                {if (true) return n;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAX:
        case MIN:
        case AVG:
        case COUNT_STAR:
        case COUNT:
        case SUM:
        case THIS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case NULL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          n = primaryExpression();
                //System.out.println("returning unaryExpressionNOtPlusMinus = "+n);
                {if (true) return n;}
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead.
  final public void castLookahead() throws ParseException {
    if (jj_2_18(2147483647)) {
      jj_consume_token(LPAREN);
      type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        type();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case NULL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
          literal();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Node castExpression() throws ParseException {
    Object tp;
    int brackets = 0;
    Node n;
    jj_consume_token(LPAREN);
    tp = type();
    label_12:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(LBRACKET);
                                            brackets++;
      jj_consume_token(RBRACKET);
    }
    jj_consume_token(RPAREN);
    n = unaryExpression();
        {if (true) return new CastNode(n, brackets, tp);}
    throw new Error("Missing return statement in function");
  }

  final public Node primaryExpression() throws ParseException {
        PrimaryExprNode node = new PrimaryExprNode();
        Node n = null;
    Node pos = null;
    n = primaryPrefix();
    pos = node.childList = n;
    label_13:
    while (true) {
      if (jj_2_20(3)) {
        ;
      } else {
        break label_13;
      }
      n = primarySuffix();
        pos = pos.next = n;
    }
    /*if(pos == node.childList &&  ! (node.childList instanceof MethodNode)){
		return n;
	}
	node.setParentOnChildren();
	return resolveMethod(node); 
	*/

        if(pos == node.childList &&
        (!(node.childList instanceof MethodNode) ||
                                         (node.childList instanceof MethodNode
                                         && ((MethodNode)node.childList).getMethod() > 0 ))) {
                {if (true) return node.childList;}
        }else{
                Node tmp = node;
                tmp.setParentOnChildren();
                resolveMethod(tmp);

                if(tmp.childList.next == null){
                        tmp = tmp.childList;
                }

                if(tmp != null && tmp.childList instanceof ReservedFieldNode ){
                        Node tmp2 = tmp.childList;
                        tmp2.childList = tmp2.next;

                        if(tmp2.childList != null){
                                tmp2.next = tmp2.childList.next;
                                tmp2.childList.next = null;
                        }else{
                                tmp2.next = null;
                        }
                        tmp2.setParentOnChildren();
                }
                tmp.setParentOnChildren();
                if(tmp instanceof PrimaryExprNode && tmp.childList.next == null){
                        tmp = tmp.childList;
                }
                tmp.parent = null;
                {if (true) return tmp;}
        }

        //return node;

    throw new Error("Missing return statement in function");
  }

  final public Node primaryPrefix() throws ParseException {
                       Node n = null; Token t; Node tmp;
    if (jj_2_21(2147483647)) {
      jj_consume_token(COUNT_STAR);
                                              {if (true) return new AggregateCountStarNode();}
    } else if (jj_2_22(2147483647)) {
      jj_consume_token(COUNT);
      tmp = unaryExpression();
        n = new AggregateNode(tmp, AggregateNode.TYPE_COUNT);
        {if (true) return n;}
    } else if (jj_2_23(2147483647)) {
      jj_consume_token(AVG);
      tmp = unaryExpression();
        n = new AggregateNode(tmp, AggregateNode.TYPE_AVG);
        {if (true) return n;}
    } else if (jj_2_24(2147483647)) {
      jj_consume_token(SUM);
      tmp = unaryExpression();
        n = new AggregateNode(tmp, AggregateNode.TYPE_SUM);
        {if (true) return n;}
    } else if (jj_2_25(2147483647)) {
      jj_consume_token(MIN);
      tmp = unaryExpression();
        n = new AggregateNode(tmp, AggregateNode.TYPE_MIN);
        {if (true) return n;}
    } else if (jj_2_26(2147483647)) {
      jj_consume_token(MAX);
      tmp = unaryExpression();
        n = new AggregateNode(tmp, AggregateNode.TYPE_MAX);
        {if (true) return n;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case NULL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
        n = literal();
        break;
      case IDENTIFIER:
        n = name();
        break;
      case THIS:
        jj_consume_token(THIS);
                n = new ReservedFieldNode(ReservedFieldNode.TYPE_THIS,"this");
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        n = orExpression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                //System.out.println("returning primaryPrefix = "+n);
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node primarySuffix() throws ParseException {
        Token t;
        Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      n = orExpression();
      jj_consume_token(RBRACKET);
                ArrayNode an = new ArrayNode();
                an.args = n;
                if(n != null) n.parent = an;
                {if (true) return an;}
      break;
    case DOT:
      jj_consume_token(DOT);
      n = name();
                            {if (true) return n;}
      break;
    case LPAREN:
      n = arguments();
                MethodNode mn = new MethodNode();
                //mn.args = n;
                mn.childList = n;
                if (n != null) {
            n.next = null;
            n.parent = mn;
        }
                {if (true) return mn;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node arguments() throws ParseException {
                  Node n = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAX:
    case MIN:
    case AVG:
    case COUNT_STAR:
    case COUNT:
    case SUM:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case NULL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
      n = argumentList();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                            {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node argumentList() throws ParseException {
        ArgNode node = new ArgNode();
        Node n = null;
    Node pos = null;
    n = orExpression();
        pos = node.childList = n;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      n = orExpression();
    }
        pos = pos.next = n;
    if (pos == node.childList) {if (true) return n;}
    node.setParentOnChildren();
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

/**
 * Definition of types. Primitives and Names (e.g. String).
 */
  final public Object type() throws ParseException {
    CharBuf s = null;
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                 {if (true) return Integer.TYPE;}
      break;
    case BYTE:
      jj_consume_token(BYTE);
                   {if (true) return Byte.TYPE;}
      break;
    case SHORT:
      jj_consume_token(SHORT);
                    {if (true) return Short.TYPE;}
      break;
    case LONG:
      jj_consume_token(LONG);
                   {if (true) return Long.TYPE;}
      break;
    case CHAR:
      jj_consume_token(CHAR);
                   {if (true) return Character.TYPE;}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                    {if (true) return Float.TYPE;}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                     {if (true) return Double.TYPE;}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                      {if (true) return Boolean.TYPE;}
      break;
    case IDENTIFIER:
            s = new CharBuf();
      t = jj_consume_token(IDENTIFIER);
                           s.append(t.image);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_15;
        }
        jj_consume_token(DOT);
                  s.append(".");
        t = jj_consume_token(IDENTIFIER);
                                                      s.append(t.image);
      }
          {if (true) return s.toString();}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node name() throws ParseException {
              ArrayList list = new ArrayList(); Token t = null;
    t = jj_consume_token(IDENTIFIER);
                          list.add(t.image);
    label_16:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                                      list.add(t.image);
    }
                FieldNavNode parent = null;
                Node root = null;
                for(int i = 0; i < list.size() - 1; i++){
                        FieldNavNode node = new FieldNavNode();
            node.parent = parent;
                        node.lexeme = (String)list.get(i);
                        if(parent != null){
                                parent.childList = node;
                        }else{
                                root = node;
                        }
                        parent = node;
                }

                FieldNode node = new FieldNode(parent,t.image);
//        node.parent = parent;
//		node.lexeme = t.image;
                if(parent != null){
                        parent.childList = node;
                }else{
                        root = node;
                }
                //System.out.println("returning name = "+root);
                {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public LiteralNode literal() throws ParseException {
        Token t  = null;
        LiteralNode literal = new LiteralNode(null,LiteralNode.TYPE_OTHER,null);
    StringBuffer buffer;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
            literal.type = LiteralNode.TYPE_LONG;
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
            literal.type = LiteralNode.TYPE_DOUBLE;
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                literal.type = LiteralNode.TYPE_BOOLEAN;
      break;
    case NULL:
      t = jj_consume_token(NULL);
                literal.type = LiteralNode.TYPE_NULL;
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                literal.type = LiteralNode.TYPE_STRING;
                buffer = new StringBuffer(t.image);
                buffer.deleteCharAt(0);
                buffer.deleteCharAt(buffer.length() - 1);
                literal.value = buffer.toString();
                {if (true) return literal;}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                literal.type = LiteralNode.TYPE_STRING;
                buffer = new StringBuffer(t.image);
                buffer.deleteCharAt(0);
                buffer.deleteCharAt(buffer.length() - 1);
                literal.value = buffer.toString();
                {if (true) return literal;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                literal.value = t.image;
                                {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(HAVING)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(COUNT_STAR)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(COUNT_STAR)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(COUNT_STAR)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(SUM)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(AVG)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(COUNT_STAR)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  public JDOQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x76e00001,0x0,0x76e00001,0x0,0x8000001,0x0,0x0,0x800fc001,0x1000400,0x800,0x100000,0x800fc000,0x100000,0x80000000,0x800fc001,0x0,0x0,0x800fc000,0x0,0x0,0x800fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800fc000,0x0,0x0,0x800fc000,0x80000000,0x0,0x80000000,0x0,0x800fc000,0x0,0x0,0x76e00000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x100000,0x400,0x80000,0x400,0x80000,0x0,0x200000,0x100000,0x30027d1,0x0,0x0,0x0,0x30027d1,0x0,0x400,0x30027d1,0x40000000,0x40000000,0x30027d1,0x80000000,0x80000000,0x30027d1,0x4000000,0x20000000,0x18c00000,0x18c00000,0x0,0x0,0x0,0x0,0x0,0x30027d1,0x3000000,0x3000000,0x27d1,0x30027d1,0x2000,0x27d1,0x222000,0x30027d1,0x100000,0x200000,0x400,0x3d1,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x3,0x20,0x20,0x3,0x10,0x10,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0xc,0xc,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[27];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JDOQLParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JDOQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JDOQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JDOQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JDOQLParser(JDOQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JDOQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[70];
    for (int i = 0; i < 70; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
